<doc>
    <assembly>
        <name>System.Core</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Win32.SafeHandles.SafeMemoryMappedFileHandle">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Microsoft.Win32.SafeHandles.SafeMemoryMappedFileHandle(System.IntPtr,System.Boolean)">
            <param name="preexistingHandle">To be added.</param>
            <param name="ownsHandle">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Microsoft.Win32.SafeHandles.SafeMemoryMappedFileHandle.ReleaseHandle">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Microsoft.Win32.SafeHandles.SafeMemoryMappedViewHandle">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Microsoft.Win32.SafeHandles.SafeMemoryMappedViewHandle.ReleaseHandle">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Microsoft.Win32.SafeHandles.SafeNCryptHandle">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Microsoft.Win32.SafeHandles.SafeNCryptHandle">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:Microsoft.Win32.SafeHandles.SafeNCryptHandle.IsInvalid">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Microsoft.Win32.SafeHandles.SafeNCryptHandle.ReleaseHandle">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Microsoft.Win32.SafeHandles.SafeNCryptHandle.ReleaseNativeHandle">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle.ReleaseNativeHandle">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle.ReleaseNativeHandle">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle.ReleaseNativeHandle">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:Microsoft.Win32.SafeHandles.SafePipeHandle">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:Microsoft.Win32.SafeHandles.SafePipeHandle(System.IntPtr,System.Boolean)">
            <param name="preexistingHandle">To be added.</param>
            <param name="ownsHandle">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:Microsoft.Win32.SafeHandles.SafePipeHandle.ReleaseHandle">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.Action`10">
            <typeparam name="T1">To be added.</typeparam>
            <typeparam name="T2">To be added.</typeparam>
            <typeparam name="T3">To be added.</typeparam>
            <typeparam name="T4">To be added.</typeparam>
            <typeparam name="T5">To be added.</typeparam>
            <typeparam name="T6">To be added.</typeparam>
            <typeparam name="T7">To be added.</typeparam>
            <typeparam name="T8">To be added.</typeparam>
            <typeparam name="T9">To be added.</typeparam>
            <typeparam name="T10">To be added.</typeparam>
            <param name="arg1">To be added.</param>
            <param name="arg2">To be added.</param>
            <param name="arg3">To be added.</param>
            <param name="arg4">To be added.</param>
            <param name="arg5">To be added.</param>
            <param name="arg6">To be added.</param>
            <param name="arg7">To be added.</param>
            <param name="arg8">To be added.</param>
            <param name="arg9">To be added.</param>
            <param name="arg10">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.Action`11">
            <typeparam name="T1">To be added.</typeparam>
            <typeparam name="T2">To be added.</typeparam>
            <typeparam name="T3">To be added.</typeparam>
            <typeparam name="T4">To be added.</typeparam>
            <typeparam name="T5">To be added.</typeparam>
            <typeparam name="T6">To be added.</typeparam>
            <typeparam name="T7">To be added.</typeparam>
            <typeparam name="T8">To be added.</typeparam>
            <typeparam name="T9">To be added.</typeparam>
            <typeparam name="T10">To be added.</typeparam>
            <typeparam name="T11">To be added.</typeparam>
            <param name="arg1">To be added.</param>
            <param name="arg2">To be added.</param>
            <param name="arg3">To be added.</param>
            <param name="arg4">To be added.</param>
            <param name="arg5">To be added.</param>
            <param name="arg6">To be added.</param>
            <param name="arg7">To be added.</param>
            <param name="arg8">To be added.</param>
            <param name="arg9">To be added.</param>
            <param name="arg10">To be added.</param>
            <param name="arg11">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.Action`12">
            <typeparam name="T1">To be added.</typeparam>
            <typeparam name="T2">To be added.</typeparam>
            <typeparam name="T3">To be added.</typeparam>
            <typeparam name="T4">To be added.</typeparam>
            <typeparam name="T5">To be added.</typeparam>
            <typeparam name="T6">To be added.</typeparam>
            <typeparam name="T7">To be added.</typeparam>
            <typeparam name="T8">To be added.</typeparam>
            <typeparam name="T9">To be added.</typeparam>
            <typeparam name="T10">To be added.</typeparam>
            <typeparam name="T11">To be added.</typeparam>
            <typeparam name="T12">To be added.</typeparam>
            <param name="arg1">To be added.</param>
            <param name="arg2">To be added.</param>
            <param name="arg3">To be added.</param>
            <param name="arg4">To be added.</param>
            <param name="arg5">To be added.</param>
            <param name="arg6">To be added.</param>
            <param name="arg7">To be added.</param>
            <param name="arg8">To be added.</param>
            <param name="arg9">To be added.</param>
            <param name="arg10">To be added.</param>
            <param name="arg11">To be added.</param>
            <param name="arg12">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.Action`13">
            <typeparam name="T1">To be added.</typeparam>
            <typeparam name="T2">To be added.</typeparam>
            <typeparam name="T3">To be added.</typeparam>
            <typeparam name="T4">To be added.</typeparam>
            <typeparam name="T5">To be added.</typeparam>
            <typeparam name="T6">To be added.</typeparam>
            <typeparam name="T7">To be added.</typeparam>
            <typeparam name="T8">To be added.</typeparam>
            <typeparam name="T9">To be added.</typeparam>
            <typeparam name="T10">To be added.</typeparam>
            <typeparam name="T11">To be added.</typeparam>
            <typeparam name="T12">To be added.</typeparam>
            <typeparam name="T13">To be added.</typeparam>
            <param name="arg1">To be added.</param>
            <param name="arg2">To be added.</param>
            <param name="arg3">To be added.</param>
            <param name="arg4">To be added.</param>
            <param name="arg5">To be added.</param>
            <param name="arg6">To be added.</param>
            <param name="arg7">To be added.</param>
            <param name="arg8">To be added.</param>
            <param name="arg9">To be added.</param>
            <param name="arg10">To be added.</param>
            <param name="arg11">To be added.</param>
            <param name="arg12">To be added.</param>
            <param name="arg13">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.Action`14">
            <typeparam name="T1">To be added.</typeparam>
            <typeparam name="T2">To be added.</typeparam>
            <typeparam name="T3">To be added.</typeparam>
            <typeparam name="T4">To be added.</typeparam>
            <typeparam name="T5">To be added.</typeparam>
            <typeparam name="T6">To be added.</typeparam>
            <typeparam name="T7">To be added.</typeparam>
            <typeparam name="T8">To be added.</typeparam>
            <typeparam name="T9">To be added.</typeparam>
            <typeparam name="T10">To be added.</typeparam>
            <typeparam name="T11">To be added.</typeparam>
            <typeparam name="T12">To be added.</typeparam>
            <typeparam name="T13">To be added.</typeparam>
            <typeparam name="T14">To be added.</typeparam>
            <param name="arg1">To be added.</param>
            <param name="arg2">To be added.</param>
            <param name="arg3">To be added.</param>
            <param name="arg4">To be added.</param>
            <param name="arg5">To be added.</param>
            <param name="arg6">To be added.</param>
            <param name="arg7">To be added.</param>
            <param name="arg8">To be added.</param>
            <param name="arg9">To be added.</param>
            <param name="arg10">To be added.</param>
            <param name="arg11">To be added.</param>
            <param name="arg12">To be added.</param>
            <param name="arg13">To be added.</param>
            <param name="arg14">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.Action`15">
            <typeparam name="T1">To be added.</typeparam>
            <typeparam name="T2">To be added.</typeparam>
            <typeparam name="T3">To be added.</typeparam>
            <typeparam name="T4">To be added.</typeparam>
            <typeparam name="T5">To be added.</typeparam>
            <typeparam name="T6">To be added.</typeparam>
            <typeparam name="T7">To be added.</typeparam>
            <typeparam name="T8">To be added.</typeparam>
            <typeparam name="T9">To be added.</typeparam>
            <typeparam name="T10">To be added.</typeparam>
            <typeparam name="T11">To be added.</typeparam>
            <typeparam name="T12">To be added.</typeparam>
            <typeparam name="T13">To be added.</typeparam>
            <typeparam name="T14">To be added.</typeparam>
            <typeparam name="T15">To be added.</typeparam>
            <param name="arg1">To be added.</param>
            <param name="arg2">To be added.</param>
            <param name="arg3">To be added.</param>
            <param name="arg4">To be added.</param>
            <param name="arg5">To be added.</param>
            <param name="arg6">To be added.</param>
            <param name="arg7">To be added.</param>
            <param name="arg8">To be added.</param>
            <param name="arg9">To be added.</param>
            <param name="arg10">To be added.</param>
            <param name="arg11">To be added.</param>
            <param name="arg12">To be added.</param>
            <param name="arg13">To be added.</param>
            <param name="arg14">To be added.</param>
            <param name="arg15">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.Action`16">
            <typeparam name="T1">To be added.</typeparam>
            <typeparam name="T2">To be added.</typeparam>
            <typeparam name="T3">To be added.</typeparam>
            <typeparam name="T4">To be added.</typeparam>
            <typeparam name="T5">To be added.</typeparam>
            <typeparam name="T6">To be added.</typeparam>
            <typeparam name="T7">To be added.</typeparam>
            <typeparam name="T8">To be added.</typeparam>
            <typeparam name="T9">To be added.</typeparam>
            <typeparam name="T10">To be added.</typeparam>
            <typeparam name="T11">To be added.</typeparam>
            <typeparam name="T12">To be added.</typeparam>
            <typeparam name="T13">To be added.</typeparam>
            <typeparam name="T14">To be added.</typeparam>
            <typeparam name="T15">To be added.</typeparam>
            <typeparam name="T16">To be added.</typeparam>
            <param name="arg1">To be added.</param>
            <param name="arg2">To be added.</param>
            <param name="arg3">To be added.</param>
            <param name="arg4">To be added.</param>
            <param name="arg5">To be added.</param>
            <param name="arg6">To be added.</param>
            <param name="arg7">To be added.</param>
            <param name="arg8">To be added.</param>
            <param name="arg9">To be added.</param>
            <param name="arg10">To be added.</param>
            <param name="arg11">To be added.</param>
            <param name="arg12">To be added.</param>
            <param name="arg13">To be added.</param>
            <param name="arg14">To be added.</param>
            <param name="arg15">To be added.</param>
            <param name="arg16">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.Action`9">
            <typeparam name="T1">To be added.</typeparam>
            <typeparam name="T2">To be added.</typeparam>
            <typeparam name="T3">To be added.</typeparam>
            <typeparam name="T4">To be added.</typeparam>
            <typeparam name="T5">To be added.</typeparam>
            <typeparam name="T6">To be added.</typeparam>
            <typeparam name="T7">To be added.</typeparam>
            <typeparam name="T8">To be added.</typeparam>
            <typeparam name="T9">To be added.</typeparam>
            <param name="arg1">To be added.</param>
            <param name="arg2">To be added.</param>
            <param name="arg3">To be added.</param>
            <param name="arg4">To be added.</param>
            <param name="arg5">To be added.</param>
            <param name="arg6">To be added.</param>
            <param name="arg7">To be added.</param>
            <param name="arg8">To be added.</param>
            <param name="arg9">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.Func`10">
            <typeparam name="T1">To be added.</typeparam>
            <typeparam name="T2">To be added.</typeparam>
            <typeparam name="T3">To be added.</typeparam>
            <typeparam name="T4">To be added.</typeparam>
            <typeparam name="T5">To be added.</typeparam>
            <typeparam name="T6">To be added.</typeparam>
            <typeparam name="T7">To be added.</typeparam>
            <typeparam name="T8">To be added.</typeparam>
            <typeparam name="T9">To be added.</typeparam>
            <typeparam name="TResult">To be added.</typeparam>
            <param name="arg1">To be added.</param>
            <param name="arg2">To be added.</param>
            <param name="arg3">To be added.</param>
            <param name="arg4">To be added.</param>
            <param name="arg5">To be added.</param>
            <param name="arg6">To be added.</param>
            <param name="arg7">To be added.</param>
            <param name="arg8">To be added.</param>
            <param name="arg9">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.Func`11">
            <typeparam name="T1">To be added.</typeparam>
            <typeparam name="T2">To be added.</typeparam>
            <typeparam name="T3">To be added.</typeparam>
            <typeparam name="T4">To be added.</typeparam>
            <typeparam name="T5">To be added.</typeparam>
            <typeparam name="T6">To be added.</typeparam>
            <typeparam name="T7">To be added.</typeparam>
            <typeparam name="T8">To be added.</typeparam>
            <typeparam name="T9">To be added.</typeparam>
            <typeparam name="T10">To be added.</typeparam>
            <typeparam name="TResult">To be added.</typeparam>
            <param name="arg1">To be added.</param>
            <param name="arg2">To be added.</param>
            <param name="arg3">To be added.</param>
            <param name="arg4">To be added.</param>
            <param name="arg5">To be added.</param>
            <param name="arg6">To be added.</param>
            <param name="arg7">To be added.</param>
            <param name="arg8">To be added.</param>
            <param name="arg9">To be added.</param>
            <param name="arg10">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.Func`12">
            <typeparam name="T1">To be added.</typeparam>
            <typeparam name="T2">To be added.</typeparam>
            <typeparam name="T3">To be added.</typeparam>
            <typeparam name="T4">To be added.</typeparam>
            <typeparam name="T5">To be added.</typeparam>
            <typeparam name="T6">To be added.</typeparam>
            <typeparam name="T7">To be added.</typeparam>
            <typeparam name="T8">To be added.</typeparam>
            <typeparam name="T9">To be added.</typeparam>
            <typeparam name="T10">To be added.</typeparam>
            <typeparam name="T11">To be added.</typeparam>
            <typeparam name="TResult">To be added.</typeparam>
            <param name="arg1">To be added.</param>
            <param name="arg2">To be added.</param>
            <param name="arg3">To be added.</param>
            <param name="arg4">To be added.</param>
            <param name="arg5">To be added.</param>
            <param name="arg6">To be added.</param>
            <param name="arg7">To be added.</param>
            <param name="arg8">To be added.</param>
            <param name="arg9">To be added.</param>
            <param name="arg10">To be added.</param>
            <param name="arg11">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.Func`13">
            <typeparam name="T1">To be added.</typeparam>
            <typeparam name="T2">To be added.</typeparam>
            <typeparam name="T3">To be added.</typeparam>
            <typeparam name="T4">To be added.</typeparam>
            <typeparam name="T5">To be added.</typeparam>
            <typeparam name="T6">To be added.</typeparam>
            <typeparam name="T7">To be added.</typeparam>
            <typeparam name="T8">To be added.</typeparam>
            <typeparam name="T9">To be added.</typeparam>
            <typeparam name="T10">To be added.</typeparam>
            <typeparam name="T11">To be added.</typeparam>
            <typeparam name="T12">To be added.</typeparam>
            <typeparam name="TResult">To be added.</typeparam>
            <param name="arg1">To be added.</param>
            <param name="arg2">To be added.</param>
            <param name="arg3">To be added.</param>
            <param name="arg4">To be added.</param>
            <param name="arg5">To be added.</param>
            <param name="arg6">To be added.</param>
            <param name="arg7">To be added.</param>
            <param name="arg8">To be added.</param>
            <param name="arg9">To be added.</param>
            <param name="arg10">To be added.</param>
            <param name="arg11">To be added.</param>
            <param name="arg12">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.Func`14">
            <typeparam name="T1">To be added.</typeparam>
            <typeparam name="T2">To be added.</typeparam>
            <typeparam name="T3">To be added.</typeparam>
            <typeparam name="T4">To be added.</typeparam>
            <typeparam name="T5">To be added.</typeparam>
            <typeparam name="T6">To be added.</typeparam>
            <typeparam name="T7">To be added.</typeparam>
            <typeparam name="T8">To be added.</typeparam>
            <typeparam name="T9">To be added.</typeparam>
            <typeparam name="T10">To be added.</typeparam>
            <typeparam name="T11">To be added.</typeparam>
            <typeparam name="T12">To be added.</typeparam>
            <typeparam name="T13">To be added.</typeparam>
            <typeparam name="TResult">To be added.</typeparam>
            <param name="arg1">To be added.</param>
            <param name="arg2">To be added.</param>
            <param name="arg3">To be added.</param>
            <param name="arg4">To be added.</param>
            <param name="arg5">To be added.</param>
            <param name="arg6">To be added.</param>
            <param name="arg7">To be added.</param>
            <param name="arg8">To be added.</param>
            <param name="arg9">To be added.</param>
            <param name="arg10">To be added.</param>
            <param name="arg11">To be added.</param>
            <param name="arg12">To be added.</param>
            <param name="arg13">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.Func`15">
            <typeparam name="T1">To be added.</typeparam>
            <typeparam name="T2">To be added.</typeparam>
            <typeparam name="T3">To be added.</typeparam>
            <typeparam name="T4">To be added.</typeparam>
            <typeparam name="T5">To be added.</typeparam>
            <typeparam name="T6">To be added.</typeparam>
            <typeparam name="T7">To be added.</typeparam>
            <typeparam name="T8">To be added.</typeparam>
            <typeparam name="T9">To be added.</typeparam>
            <typeparam name="T10">To be added.</typeparam>
            <typeparam name="T11">To be added.</typeparam>
            <typeparam name="T12">To be added.</typeparam>
            <typeparam name="T13">To be added.</typeparam>
            <typeparam name="T14">To be added.</typeparam>
            <typeparam name="TResult">To be added.</typeparam>
            <param name="arg1">To be added.</param>
            <param name="arg2">To be added.</param>
            <param name="arg3">To be added.</param>
            <param name="arg4">To be added.</param>
            <param name="arg5">To be added.</param>
            <param name="arg6">To be added.</param>
            <param name="arg7">To be added.</param>
            <param name="arg8">To be added.</param>
            <param name="arg9">To be added.</param>
            <param name="arg10">To be added.</param>
            <param name="arg11">To be added.</param>
            <param name="arg12">To be added.</param>
            <param name="arg13">To be added.</param>
            <param name="arg14">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.Func`16">
            <typeparam name="T1">To be added.</typeparam>
            <typeparam name="T2">To be added.</typeparam>
            <typeparam name="T3">To be added.</typeparam>
            <typeparam name="T4">To be added.</typeparam>
            <typeparam name="T5">To be added.</typeparam>
            <typeparam name="T6">To be added.</typeparam>
            <typeparam name="T7">To be added.</typeparam>
            <typeparam name="T8">To be added.</typeparam>
            <typeparam name="T9">To be added.</typeparam>
            <typeparam name="T10">To be added.</typeparam>
            <typeparam name="T11">To be added.</typeparam>
            <typeparam name="T12">To be added.</typeparam>
            <typeparam name="T13">To be added.</typeparam>
            <typeparam name="T14">To be added.</typeparam>
            <typeparam name="T15">To be added.</typeparam>
            <typeparam name="TResult">To be added.</typeparam>
            <param name="arg1">To be added.</param>
            <param name="arg2">To be added.</param>
            <param name="arg3">To be added.</param>
            <param name="arg4">To be added.</param>
            <param name="arg5">To be added.</param>
            <param name="arg6">To be added.</param>
            <param name="arg7">To be added.</param>
            <param name="arg8">To be added.</param>
            <param name="arg9">To be added.</param>
            <param name="arg10">To be added.</param>
            <param name="arg11">To be added.</param>
            <param name="arg12">To be added.</param>
            <param name="arg13">To be added.</param>
            <param name="arg14">To be added.</param>
            <param name="arg15">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.Func`17">
            <typeparam name="T1">To be added.</typeparam>
            <typeparam name="T2">To be added.</typeparam>
            <typeparam name="T3">To be added.</typeparam>
            <typeparam name="T4">To be added.</typeparam>
            <typeparam name="T5">To be added.</typeparam>
            <typeparam name="T6">To be added.</typeparam>
            <typeparam name="T7">To be added.</typeparam>
            <typeparam name="T8">To be added.</typeparam>
            <typeparam name="T9">To be added.</typeparam>
            <typeparam name="T10">To be added.</typeparam>
            <typeparam name="T11">To be added.</typeparam>
            <typeparam name="T12">To be added.</typeparam>
            <typeparam name="T13">To be added.</typeparam>
            <typeparam name="T14">To be added.</typeparam>
            <typeparam name="T15">To be added.</typeparam>
            <typeparam name="T16">To be added.</typeparam>
            <typeparam name="TResult">To be added.</typeparam>
            <param name="arg1">To be added.</param>
            <param name="arg2">To be added.</param>
            <param name="arg3">To be added.</param>
            <param name="arg4">To be added.</param>
            <param name="arg5">To be added.</param>
            <param name="arg6">To be added.</param>
            <param name="arg7">To be added.</param>
            <param name="arg8">To be added.</param>
            <param name="arg9">To be added.</param>
            <param name="arg10">To be added.</param>
            <param name="arg11">To be added.</param>
            <param name="arg12">To be added.</param>
            <param name="arg13">To be added.</param>
            <param name="arg14">To be added.</param>
            <param name="arg15">To be added.</param>
            <param name="arg16">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.Collections.Generic.HashSet`1">
            <typeparam name="T">To be added.</typeparam>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:System.Collections.Generic.HashSet`1">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:System.Collections.Generic.HashSet`1(`0System`0.`0Collections`0.`0Generic`0.`0IEnumerable`0{`0T`0})">
            <param name="collection">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:System.Collections.Generic.HashSet`1(`0System`0.`0Collections`0.`0Generic`0.`0IEqualityComparer`0{`0T`0})">
            <param name="comparer">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:System.Collections.Generic.HashSet`1(`0System`0.`0Collections`0.`0Generic`0.`0IEnumerable`0{`0T`0},`0System`0.`0Collections`0.`0Generic`0.`0IEqualityComparer`0{`0T`0})">
            <param name="collection">To be added.</param>
            <param name="comparer">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:System.Collections.Generic.HashSet`1(`0System`0.`0Runtime`0.`0Serialization`0.`0SerializationInfo`0,`0System`0.`0Runtime`0.`0Serialization`0.`0StreamingContext`0)">
            <param name="info">To be added.</param>
            <param name="context">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Collections.Generic.HashSet`1.Add(`0T`0)">
            <param name="item">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Collections.Generic.HashSet`1.Clear">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Collections.Generic.HashSet`1.Comparer">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Collections.Generic.HashSet`1.Contains(`0T`0)">
            <param name="item">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Collections.Generic.HashSet`1.CopyTo(`0T`0[])">
            <param name="array">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Collections.Generic.HashSet`1.CopyTo(`0T`0[],`0System`0.`0Int32`0)">
            <param name="array">To be added.</param>
            <param name="arrayIndex">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Collections.Generic.HashSet`1.CopyTo(`0T`0[],`0System`0.`0Int32`0,`0System`0.`0Int32`0)">
            <param name="array">To be added.</param>
            <param name="arrayIndex">To be added.</param>
            <param name="count">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Collections.Generic.HashSet`1.Count">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Collections.Generic.HashSet`1.CreateSetComparer">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Collections.Generic.HashSet`1.ExceptWith(`0System`0.`0Collections`0.`0Generic`0.`0IEnumerable`0{`0T`0})">
            <param name="other">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Collections.Generic.HashSet`1.GetEnumerator">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Collections.Generic.HashSet`1.GetObjectData(`0System`0.`0Runtime`0.`0Serialization`0.`0SerializationInfo`0,`0System`0.`0Runtime`0.`0Serialization`0.`0StreamingContext`0)">
            <param name="info">To be added.</param>
            <param name="context">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Collections.Generic.HashSet`1.IntersectWith(`0System`0.`0Collections`0.`0Generic`0.`0IEnumerable`0{`0T`0})">
            <param name="other">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Collections.Generic.HashSet`1.IsProperSubsetOf(`0System`0.`0Collections`0.`0Generic`0.`0IEnumerable`0{`0T`0})">
            <param name="other">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Collections.Generic.HashSet`1.IsProperSupersetOf(`0System`0.`0Collections`0.`0Generic`0.`0IEnumerable`0{`0T`0})">
            <param name="other">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Collections.Generic.HashSet`1.IsSubsetOf(`0System`0.`0Collections`0.`0Generic`0.`0IEnumerable`0{`0T`0})">
            <param name="other">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Collections.Generic.HashSet`1.IsSupersetOf(`0System`0.`0Collections`0.`0Generic`0.`0IEnumerable`0{`0T`0})">
            <param name="other">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Collections.Generic.HashSet`1.OnDeserialization(`0System`0.`0Object`0)">
            <param name="sender">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Collections.Generic.HashSet`1.Overlaps(`0System`0.`0Collections`0.`0Generic`0.`0IEnumerable`0{`0T`0})">
            <param name="other">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Collections.Generic.HashSet`1.Remove(`0T`0)">
            <param name="item">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Collections.Generic.HashSet`1.RemoveWhere(`0System`0.`0Predicate`0{`0T`0})">
            <param name="match">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Collections.Generic.HashSet`1.SetEquals(`0System`0.`0Collections`0.`0Generic`0.`0IEnumerable`0{`0T`0})">
            <param name="other">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Collections.Generic.HashSet`1.SymmetricExceptWith(`0System`0.`0Collections`0.`0Generic`0.`0IEnumerable`0{`0T`0})">
            <param name="other">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Collections.Generic.HashSet`1.System#Collections#Generic#ICollection{T}#Add(`0T`0)">
            <param name="item">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Collections.Generic.HashSet`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Collections.Generic.HashSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Collections.Generic.HashSet`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Collections.Generic.HashSet`1.TrimExcess">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Collections.Generic.HashSet`1.UnionWith(`0System`0.`0Collections`0.`0Generic`0.`0IEnumerable`0{`0T`0})">
            <param name="other">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.Collections.Generic.HashSet`1.Enumerator">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Collections.Generic.HashSet`1.Enumerator.Current">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Collections.Generic.HashSet`1.Enumerator.Dispose">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Collections.Generic.HashSet`1.Enumerator.MoveNext">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Collections.Generic.HashSet`1.Enumerator.System#Collections#IEnumerator#Current">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Collections.Generic.HashSet`1.Enumerator.System#Collections#IEnumerator#Reset">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.Dynamic.BinaryOperationBinder">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:System.Dynamic.BinaryOperationBinder(System.Linq.Expressions.ExpressionType)">
            <param name="operation">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Dynamic.BinaryOperationBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
            <param name="target">To be added.</param>
            <param name="args">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Dynamic.BinaryOperationBinder.FallbackBinaryOperation(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
            <param name="target">To be added.</param>
            <param name="arg">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Dynamic.BinaryOperationBinder.FallbackBinaryOperation(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
            <param name="target">To be added.</param>
            <param name="arg">To be added.</param>
            <param name="errorSuggestion">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Dynamic.BinaryOperationBinder.Operation">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Dynamic.BinaryOperationBinder.ReturnType">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.Dynamic.BindingRestrictions">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Dynamic.BindingRestrictions.Combine(System.Collections.Generic.IList{System.Dynamic.DynamicMetaObject})">
            <param name="contributingObjects">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:System.Dynamic.BindingRestrictions.Empty">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Dynamic.BindingRestrictions.GetExpressionRestriction(System.Linq.Expressions.Expression)">
            <param name="expression">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Dynamic.BindingRestrictions.GetInstanceRestriction(System.Linq.Expressions.Expression,System.Object)">
            <param name="expression">To be added.</param>
            <param name="instance">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Dynamic.BindingRestrictions.GetTypeRestriction(System.Linq.Expressions.Expression,System.Type)">
            <param name="expression">To be added.</param>
            <param name="type">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Dynamic.BindingRestrictions.Merge(System.Dynamic.BindingRestrictions)">
            <param name="restrictions">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Dynamic.BindingRestrictions.ToExpression">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.Dynamic.CallInfo">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:System.Dynamic.CallInfo(System.Int32,System.Collections.Generic.IEnumerable{System.String})">
            <param name="argCount">To be added.</param>
            <param name="argNames">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:System.Dynamic.CallInfo(System.Int32,System.String[])">
            <param name="argCount">To be added.</param>
            <param name="argNames">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Dynamic.CallInfo.ArgumentCount">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Dynamic.CallInfo.ArgumentNames">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Dynamic.CallInfo.Equals(System.Object)">
            <param name="obj">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Dynamic.CallInfo.GetHashCode">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.Dynamic.ConvertBinder">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:System.Dynamic.ConvertBinder(System.Type,System.Boolean)">
            <param name="type">To be added.</param>
            <param name="explicit">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Dynamic.ConvertBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
            <param name="target">To be added.</param>
            <param name="args">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Dynamic.ConvertBinder.Explicit">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Dynamic.ConvertBinder.FallbackConvert(System.Dynamic.DynamicMetaObject)">
            <param name="target">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Dynamic.ConvertBinder.FallbackConvert(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
            <param name="target">To be added.</param>
            <param name="errorSuggestion">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Dynamic.ConvertBinder.ReturnType">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Dynamic.ConvertBinder.Type">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.Dynamic.CreateInstanceBinder">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:System.Dynamic.CreateInstanceBinder(System.Dynamic.CallInfo)">
            <param name="callInfo">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Dynamic.CreateInstanceBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
            <param name="target">To be added.</param>
            <param name="args">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Dynamic.CreateInstanceBinder.CallInfo">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Dynamic.CreateInstanceBinder.FallbackCreateInstance(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
            <param name="target">To be added.</param>
            <param name="args">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Dynamic.CreateInstanceBinder.FallbackCreateInstance(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
            <param name="target">To be added.</param>
            <param name="args">To be added.</param>
            <param name="errorSuggestion">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Dynamic.CreateInstanceBinder.ReturnType">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.Dynamic.DeleteIndexBinder">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:System.Dynamic.DeleteIndexBinder(System.Dynamic.CallInfo)">
            <param name="callInfo">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Dynamic.DeleteIndexBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
            <param name="target">To be added.</param>
            <param name="args">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Dynamic.DeleteIndexBinder.CallInfo">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Dynamic.DeleteIndexBinder.FallbackDeleteIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
            <param name="target">To be added.</param>
            <param name="indexes">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Dynamic.DeleteIndexBinder.FallbackDeleteIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
            <param name="target">To be added.</param>
            <param name="indexes">To be added.</param>
            <param name="errorSuggestion">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Dynamic.DeleteIndexBinder.ReturnType">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.Dynamic.DeleteMemberBinder">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:System.Dynamic.DeleteMemberBinder(System.String,System.Boolean)">
            <param name="name">To be added.</param>
            <param name="ignoreCase">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Dynamic.DeleteMemberBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
            <param name="target">To be added.</param>
            <param name="args">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Dynamic.DeleteMemberBinder.FallbackDeleteMember(System.Dynamic.DynamicMetaObject)">
            <param name="target">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Dynamic.DeleteMemberBinder.FallbackDeleteMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
            <param name="target">To be added.</param>
            <param name="errorSuggestion">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Dynamic.DeleteMemberBinder.IgnoreCase">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Dynamic.DeleteMemberBinder.Name">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Dynamic.DeleteMemberBinder.ReturnType">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.Dynamic.DynamicMetaObject">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:System.Dynamic.DynamicMetaObject(System.Linq.Expressions.Expression,System.Dynamic.BindingRestrictions)">
            <param name="expression">To be added.</param>
            <param name="restrictions">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:System.Dynamic.DynamicMetaObject(System.Linq.Expressions.Expression,System.Dynamic.BindingRestrictions,System.Object)">
            <param name="expression">To be added.</param>
            <param name="restrictions">To be added.</param>
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Dynamic.DynamicMetaObject.BindBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Dynamic.DynamicMetaObject)">
            <param name="binder">To be added.</param>
            <param name="arg">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)">
            <param name="binder">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Dynamic.DynamicMetaObject.BindCreateInstance(System.Dynamic.CreateInstanceBinder,System.Dynamic.DynamicMetaObject[])">
            <param name="binder">To be added.</param>
            <param name="args">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Dynamic.DynamicMetaObject.BindDeleteIndex(System.Dynamic.DeleteIndexBinder,System.Dynamic.DynamicMetaObject[])">
            <param name="binder">To be added.</param>
            <param name="indexes">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Dynamic.DynamicMetaObject.BindDeleteMember(System.Dynamic.DeleteMemberBinder)">
            <param name="binder">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Dynamic.DynamicMetaObject.BindGetIndex(System.Dynamic.GetIndexBinder,System.Dynamic.DynamicMetaObject[])">
            <param name="binder">To be added.</param>
            <param name="indexes">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Dynamic.DynamicMetaObject.BindGetMember(System.Dynamic.GetMemberBinder)">
            <param name="binder">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Dynamic.DynamicMetaObject.BindInvoke(System.Dynamic.InvokeBinder,System.Dynamic.DynamicMetaObject[])">
            <param name="binder">To be added.</param>
            <param name="args">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Dynamic.DynamicMetaObject.BindInvokeMember(System.Dynamic.InvokeMemberBinder,System.Dynamic.DynamicMetaObject[])">
            <param name="binder">To be added.</param>
            <param name="args">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Dynamic.DynamicMetaObject.BindSetIndex(System.Dynamic.SetIndexBinder,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
            <param name="binder">To be added.</param>
            <param name="indexes">To be added.</param>
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Dynamic.DynamicMetaObject.BindSetMember(System.Dynamic.SetMemberBinder,System.Dynamic.DynamicMetaObject)">
            <param name="binder">To be added.</param>
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Dynamic.DynamicMetaObject.BindUnaryOperation(System.Dynamic.UnaryOperationBinder)">
            <param name="binder">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Dynamic.DynamicMetaObject.Create(System.Object,System.Linq.Expressions.Expression)">
            <param name="value">To be added.</param>
            <param name="expression">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:System.Dynamic.DynamicMetaObject.EmptyMetaObjects">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Dynamic.DynamicMetaObject.Expression">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Dynamic.DynamicMetaObject.GetDynamicMemberNames">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Dynamic.DynamicMetaObject.HasValue">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Dynamic.DynamicMetaObject.LimitType">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Dynamic.DynamicMetaObject.Restrictions">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Dynamic.DynamicMetaObject.RuntimeType">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Dynamic.DynamicMetaObject.Value">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.Dynamic.DynamicMetaObjectBinder">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:System.Dynamic.DynamicMetaObjectBinder">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Dynamic.DynamicMetaObjectBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
            <param name="target">To be added.</param>
            <param name="args">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Dynamic.DynamicMetaObjectBinder.Bind(System.Object[],System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.LabelTarget)">
            <param name="args">To be added.</param>
            <param name="parameters">To be added.</param>
            <param name="returnLabel">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Dynamic.DynamicMetaObjectBinder.Defer(System.Dynamic.DynamicMetaObject[])">
            <param name="args">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Dynamic.DynamicMetaObjectBinder.Defer(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
            <param name="target">To be added.</param>
            <param name="args">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Dynamic.DynamicMetaObjectBinder.GetUpdateExpression(System.Type)">
            <param name="type">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Dynamic.DynamicMetaObjectBinder.ReturnType">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.Dynamic.DynamicObject">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:System.Dynamic.DynamicObject">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Dynamic.DynamicObject.GetDynamicMemberNames">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Dynamic.DynamicObject.GetMetaObject(System.Linq.Expressions.Expression)">
            <param name="parameter">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
            <param name="binder">To be added.</param>
            <param name="arg">To be added.</param>
            <param name="result">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)">
            <param name="binder">To be added.</param>
            <param name="result">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Dynamic.DynamicObject.TryCreateInstance(System.Dynamic.CreateInstanceBinder,System.Object[],System.Object@)">
            <param name="binder">To be added.</param>
            <param name="args">To be added.</param>
            <param name="result">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Dynamic.DynamicObject.TryDeleteIndex(System.Dynamic.DeleteIndexBinder,System.Object[])">
            <param name="binder">To be added.</param>
            <param name="indexes">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Dynamic.DynamicObject.TryDeleteMember(System.Dynamic.DeleteMemberBinder)">
            <param name="binder">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Dynamic.DynamicObject.TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)">
            <param name="binder">To be added.</param>
            <param name="indexes">To be added.</param>
            <param name="result">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Dynamic.DynamicObject.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <param name="binder">To be added.</param>
            <param name="result">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Dynamic.DynamicObject.TryInvoke(System.Dynamic.InvokeBinder,System.Object[],System.Object@)">
            <param name="binder">To be added.</param>
            <param name="args">To be added.</param>
            <param name="result">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Dynamic.DynamicObject.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
            <param name="binder">To be added.</param>
            <param name="args">To be added.</param>
            <param name="result">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Dynamic.DynamicObject.TrySetIndex(System.Dynamic.SetIndexBinder,System.Object[],System.Object)">
            <param name="binder">To be added.</param>
            <param name="indexes">To be added.</param>
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Dynamic.DynamicObject.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
            <param name="binder">To be added.</param>
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)">
            <param name="binder">To be added.</param>
            <param name="result">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.Dynamic.ExpandoObject">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:System.Dynamic.ExpandoObject">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <param name="item">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#Clear">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <param name="item">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)">
            <param name="array">To be added.</param>
            <param name="arrayIndex">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Dynamic.ExpandoObject.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#Count">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Dynamic.ExpandoObject.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#IsReadOnly">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <param name="item">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#IDictionary{System#String,System#Object}#Add(System.String,System.Object)">
            <param name="key">To be added.</param>
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#IDictionary{System#String,System#Object}#ContainsKey(System.String)">
            <param name="key">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Dynamic.ExpandoObject.System#Collections#Generic#IDictionary{System#String,System#Object}#Item(System.String)">
            <param name="key">To be added.</param>
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Dynamic.ExpandoObject.System#Collections#Generic#IDictionary{System#String,System#Object}#Keys">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#IDictionary{System#String,System#Object}#Remove(System.String)">
            <param name="key">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#IDictionary{System#String,System#Object}#TryGetValue(System.String,System.Object@)">
            <param name="key">To be added.</param>
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Dynamic.ExpandoObject.System#Collections#Generic#IDictionary{System#String,System#Object}#Values">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#GetEnumerator">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Dynamic.ExpandoObject.System#Collections#IEnumerable#GetEnumerator">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Dynamic.ExpandoObject.System#Dynamic#IDynamicMetaObjectProvider#GetMetaObject(System.Linq.Expressions.Expression)">
            <param name="parameter">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.Dynamic.GetIndexBinder">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:System.Dynamic.GetIndexBinder(System.Dynamic.CallInfo)">
            <param name="callInfo">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Dynamic.GetIndexBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
            <param name="target">To be added.</param>
            <param name="args">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Dynamic.GetIndexBinder.CallInfo">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Dynamic.GetIndexBinder.FallbackGetIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
            <param name="target">To be added.</param>
            <param name="indexes">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Dynamic.GetIndexBinder.FallbackGetIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
            <param name="target">To be added.</param>
            <param name="indexes">To be added.</param>
            <param name="errorSuggestion">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Dynamic.GetIndexBinder.ReturnType">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.Dynamic.GetMemberBinder">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:System.Dynamic.GetMemberBinder(System.String,System.Boolean)">
            <param name="name">To be added.</param>
            <param name="ignoreCase">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Dynamic.GetMemberBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
            <param name="target">To be added.</param>
            <param name="args">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Dynamic.GetMemberBinder.FallbackGetMember(System.Dynamic.DynamicMetaObject)">
            <param name="target">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Dynamic.GetMemberBinder.FallbackGetMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
            <param name="target">To be added.</param>
            <param name="errorSuggestion">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Dynamic.GetMemberBinder.IgnoreCase">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Dynamic.GetMemberBinder.Name">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Dynamic.GetMemberBinder.ReturnType">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.Dynamic.IDynamicMetaObjectProvider">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject(System.Linq.Expressions.Expression)">
            <param name="parameter">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.Dynamic.IInvokeOnGetBinder">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Dynamic.IInvokeOnGetBinder.InvokeOnGet">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.Dynamic.InvokeBinder">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:System.Dynamic.InvokeBinder(System.Dynamic.CallInfo)">
            <param name="callInfo">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Dynamic.InvokeBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
            <param name="target">To be added.</param>
            <param name="args">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Dynamic.InvokeBinder.CallInfo">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Dynamic.InvokeBinder.FallbackInvoke(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
            <param name="target">To be added.</param>
            <param name="args">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Dynamic.InvokeBinder.FallbackInvoke(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
            <param name="target">To be added.</param>
            <param name="args">To be added.</param>
            <param name="errorSuggestion">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Dynamic.InvokeBinder.ReturnType">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.Dynamic.InvokeMemberBinder">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:System.Dynamic.InvokeMemberBinder(System.String,System.Boolean,System.Dynamic.CallInfo)">
            <param name="name">To be added.</param>
            <param name="ignoreCase">To be added.</param>
            <param name="callInfo">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Dynamic.InvokeMemberBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
            <param name="target">To be added.</param>
            <param name="args">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Dynamic.InvokeMemberBinder.CallInfo">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Dynamic.InvokeMemberBinder.FallbackInvoke(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
            <param name="target">To be added.</param>
            <param name="args">To be added.</param>
            <param name="errorSuggestion">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Dynamic.InvokeMemberBinder.FallbackInvokeMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
            <param name="target">To be added.</param>
            <param name="args">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Dynamic.InvokeMemberBinder.FallbackInvokeMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
            <param name="target">To be added.</param>
            <param name="args">To be added.</param>
            <param name="errorSuggestion">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Dynamic.InvokeMemberBinder.IgnoreCase">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Dynamic.InvokeMemberBinder.Name">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Dynamic.InvokeMemberBinder.ReturnType">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.Dynamic.SetIndexBinder">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:System.Dynamic.SetIndexBinder(System.Dynamic.CallInfo)">
            <param name="callInfo">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Dynamic.SetIndexBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
            <param name="target">To be added.</param>
            <param name="args">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Dynamic.SetIndexBinder.CallInfo">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Dynamic.SetIndexBinder.FallbackSetIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
            <param name="target">To be added.</param>
            <param name="indexes">To be added.</param>
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Dynamic.SetIndexBinder.FallbackSetIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
            <param name="target">To be added.</param>
            <param name="indexes">To be added.</param>
            <param name="value">To be added.</param>
            <param name="errorSuggestion">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Dynamic.SetIndexBinder.ReturnType">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.Dynamic.SetMemberBinder">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:System.Dynamic.SetMemberBinder(System.String,System.Boolean)">
            <param name="name">To be added.</param>
            <param name="ignoreCase">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Dynamic.SetMemberBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
            <param name="target">To be added.</param>
            <param name="args">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Dynamic.SetMemberBinder.FallbackSetMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
            <param name="target">To be added.</param>
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Dynamic.SetMemberBinder.FallbackSetMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
            <param name="target">To be added.</param>
            <param name="value">To be added.</param>
            <param name="errorSuggestion">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Dynamic.SetMemberBinder.IgnoreCase">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Dynamic.SetMemberBinder.Name">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Dynamic.SetMemberBinder.ReturnType">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.Dynamic.UnaryOperationBinder">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:System.Dynamic.UnaryOperationBinder(System.Linq.Expressions.ExpressionType)">
            <param name="operation">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Dynamic.UnaryOperationBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
            <param name="target">To be added.</param>
            <param name="args">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Dynamic.UnaryOperationBinder.FallbackUnaryOperation(System.Dynamic.DynamicMetaObject)">
            <param name="target">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Dynamic.UnaryOperationBinder.FallbackUnaryOperation(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
            <param name="target">To be added.</param>
            <param name="errorSuggestion">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Dynamic.UnaryOperationBinder.Operation">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Dynamic.UnaryOperationBinder.ReturnType">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.IO.HandleInheritability">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:System.IO.HandleInheritability.Inheritable">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.IO.HandleInheritability.None">
            <summary>To be added.</summary>
        </member>
        <member name="T:System.IO.MemoryMappedFiles.MemoryMappedFile">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(System.String)">
            <param name="path">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(System.String,System.IO.FileMode)">
            <param name="path">To be added.</param>
            <param name="mode">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(System.String,System.IO.FileMode,System.String)">
            <param name="path">To be added.</param>
            <param name="mode">To be added.</param>
            <param name="mapName">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(System.String,System.IO.FileMode,System.String,System.Int64)">
            <param name="path">To be added.</param>
            <param name="mode">To be added.</param>
            <param name="mapName">To be added.</param>
            <param name="capacity">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(System.String,System.IO.FileMode,System.String,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess)">
            <param name="path">To be added.</param>
            <param name="mode">To be added.</param>
            <param name="mapName">To be added.</param>
            <param name="capacity">To be added.</param>
            <param name="access">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(System.IO.FileStream,System.String,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess,System.IO.HandleInheritability,System.Boolean)">
            <param name="fileStream">To be added.</param>
            <param name="mapName">To be added.</param>
            <param name="capacity">To be added.</param>
            <param name="access">To be added.</param>
            <param name="inheritability">To be added.</param>
            <param name="leaveOpen">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(System.IO.FileStream,System.String,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess,System.IO.MemoryMappedFiles.MemoryMappedFileSecurity,System.IO.HandleInheritability,System.Boolean)">
            <param name="fileStream">To be added.</param>
            <param name="mapName">To be added.</param>
            <param name="capacity">To be added.</param>
            <param name="access">To be added.</param>
            <param name="memoryMappedFileSecurity">To be added.</param>
            <param name="inheritability">To be added.</param>
            <param name="leaveOpen">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateNew(System.String,System.Int64)">
            <param name="mapName">To be added.</param>
            <param name="capacity">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateNew(System.String,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess)">
            <param name="mapName">To be added.</param>
            <param name="capacity">To be added.</param>
            <param name="access">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateNew(System.String,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess,System.IO.MemoryMappedFiles.MemoryMappedFileOptions,System.IO.HandleInheritability)">
            <param name="mapName">To be added.</param>
            <param name="capacity">To be added.</param>
            <param name="access">To be added.</param>
            <param name="options">To be added.</param>
            <param name="inheritability">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateNew(System.String,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess,System.IO.MemoryMappedFiles.MemoryMappedFileOptions,System.IO.MemoryMappedFiles.MemoryMappedFileSecurity,System.IO.HandleInheritability)">
            <param name="mapName">To be added.</param>
            <param name="capacity">To be added.</param>
            <param name="access">To be added.</param>
            <param name="options">To be added.</param>
            <param name="memoryMappedFileSecurity">To be added.</param>
            <param name="inheritability">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateOrOpen(System.String,System.Int64)">
            <param name="mapName">To be added.</param>
            <param name="capacity">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateOrOpen(System.String,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess)">
            <param name="mapName">To be added.</param>
            <param name="capacity">To be added.</param>
            <param name="access">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateOrOpen(System.String,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess,System.IO.MemoryMappedFiles.MemoryMappedFileOptions,System.IO.HandleInheritability)">
            <param name="mapName">To be added.</param>
            <param name="capacity">To be added.</param>
            <param name="access">To be added.</param>
            <param name="options">To be added.</param>
            <param name="inheritability">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateOrOpen(System.String,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess,System.IO.MemoryMappedFiles.MemoryMappedFileOptions,System.IO.MemoryMappedFiles.MemoryMappedFileSecurity,System.IO.HandleInheritability)">
            <param name="mapName">To be added.</param>
            <param name="capacity">To be added.</param>
            <param name="access">To be added.</param>
            <param name="options">To be added.</param>
            <param name="memoryMappedFileSecurity">To be added.</param>
            <param name="inheritability">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewAccessor">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewAccessor(System.Int64,System.Int64)">
            <param name="offset">To be added.</param>
            <param name="size">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewAccessor(System.Int64,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess)">
            <param name="offset">To be added.</param>
            <param name="size">To be added.</param>
            <param name="access">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewStream">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewStream(System.Int64,System.Int64)">
            <param name="offset">To be added.</param>
            <param name="size">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewStream(System.Int64,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess)">
            <param name="offset">To be added.</param>
            <param name="size">To be added.</param>
            <param name="access">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.Dispose">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.Dispose(System.Boolean)">
            <param name="disposing">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.GetAccessControl">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.OpenExisting(System.String)">
            <param name="mapName">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.OpenExisting(System.String,System.IO.MemoryMappedFiles.MemoryMappedFileRights)">
            <param name="mapName">To be added.</param>
            <param name="desiredAccessRights">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.OpenExisting(System.String,System.IO.MemoryMappedFiles.MemoryMappedFileRights,System.IO.HandleInheritability)">
            <param name="mapName">To be added.</param>
            <param name="desiredAccessRights">To be added.</param>
            <param name="inheritability">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.IO.MemoryMappedFiles.MemoryMappedFile.SafeMemoryMappedFileHandle">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.SetAccessControl(System.IO.MemoryMappedFiles.MemoryMappedFileSecurity)">
            <param name="memoryMappedFileSecurity">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.IO.MemoryMappedFiles.MemoryMappedFileAccess">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.CopyOnWrite">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Read">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadExecute">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWriteExecute">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Write">
            <summary>To be added.</summary>
        </member>
        <member name="T:System.IO.MemoryMappedFiles.MemoryMappedFileOptions">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileOptions.DelayAllocatePages">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileOptions.None">
            <summary>To be added.</summary>
        </member>
        <member name="T:System.IO.MemoryMappedFiles.MemoryMappedFileRights">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileRights.AccessSystemSecurity">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileRights.ChangePermissions">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileRights.CopyOnWrite">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileRights.Delete">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileRights.Execute">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileRights.FullControl">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileRights.Read">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileRights.ReadExecute">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileRights.ReadPermissions">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileRights.ReadWrite">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileRights.ReadWriteExecute">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileRights.TakeOwnership">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileRights.Write">
            <summary>To be added.</summary>
        </member>
        <member name="T:System.IO.MemoryMappedFiles.MemoryMappedFileSecurity">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:System.IO.MemoryMappedFiles.MemoryMappedFileSecurity">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.IO.MemoryMappedFiles.MemoryMappedViewAccessor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.IO.MemoryMappedFiles.MemoryMappedViewAccessor.Dispose(System.Boolean)">
            <param name="disposing">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.IO.MemoryMappedFiles.MemoryMappedViewAccessor.Flush">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.IO.MemoryMappedFiles.MemoryMappedViewAccessor.PointerOffset">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.IO.MemoryMappedFiles.MemoryMappedViewAccessor.SafeMemoryMappedViewHandle">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.IO.MemoryMappedFiles.MemoryMappedViewStream">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.IO.MemoryMappedFiles.MemoryMappedViewStream.Dispose(System.Boolean)">
            <param name="disposing">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.IO.MemoryMappedFiles.MemoryMappedViewStream.Flush">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.IO.MemoryMappedFiles.MemoryMappedViewStream.PointerOffset">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.IO.MemoryMappedFiles.MemoryMappedViewStream.SafeMemoryMappedViewHandle">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.IO.MemoryMappedFiles.MemoryMappedViewStream.SetLength(System.Int64)">
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.IO.Pipes.AnonymousPipeClientStream">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:System.IO.Pipes.AnonymousPipeClientStream(System.String)">
            <param name="pipeHandleAsString">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:System.IO.Pipes.AnonymousPipeClientStream(System.IO.Pipes.PipeDirection,Microsoft.Win32.SafeHandles.SafePipeHandle)">
            <param name="direction">To be added.</param>
            <param name="safePipeHandle">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:System.IO.Pipes.AnonymousPipeClientStream(System.IO.Pipes.PipeDirection,System.String)">
            <param name="direction">To be added.</param>
            <param name="pipeHandleAsString">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.IO.Pipes.AnonymousPipeClientStream.Finalize">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.IO.Pipes.AnonymousPipeClientStream.ReadMode">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.IO.Pipes.AnonymousPipeClientStream.TransmissionMode">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.IO.Pipes.AnonymousPipeServerStream">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:System.IO.Pipes.AnonymousPipeServerStream">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:System.IO.Pipes.AnonymousPipeServerStream(System.IO.Pipes.PipeDirection)">
            <param name="direction">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:System.IO.Pipes.AnonymousPipeServerStream(System.IO.Pipes.PipeDirection,System.IO.HandleInheritability)">
            <param name="direction">To be added.</param>
            <param name="inheritability">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:System.IO.Pipes.AnonymousPipeServerStream(System.IO.Pipes.PipeDirection,Microsoft.Win32.SafeHandles.SafePipeHandle,Microsoft.Win32.SafeHandles.SafePipeHandle)">
            <param name="direction">To be added.</param>
            <param name="serverSafePipeHandle">To be added.</param>
            <param name="clientSafePipeHandle">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:System.IO.Pipes.AnonymousPipeServerStream(System.IO.Pipes.PipeDirection,System.IO.HandleInheritability,System.Int32)">
            <param name="direction">To be added.</param>
            <param name="inheritability">To be added.</param>
            <param name="bufferSize">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:System.IO.Pipes.AnonymousPipeServerStream(System.IO.Pipes.PipeDirection,System.IO.HandleInheritability,System.Int32,System.IO.Pipes.PipeSecurity)">
            <param name="direction">To be added.</param>
            <param name="inheritability">To be added.</param>
            <param name="bufferSize">To be added.</param>
            <param name="pipeSecurity">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.IO.Pipes.AnonymousPipeServerStream.ClientSafePipeHandle">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.IO.Pipes.AnonymousPipeServerStream.DisposeLocalCopyOfClientHandle">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.IO.Pipes.AnonymousPipeServerStream.Finalize">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.IO.Pipes.AnonymousPipeServerStream.GetClientHandleAsString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.IO.Pipes.AnonymousPipeServerStream.ReadMode">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.IO.Pipes.AnonymousPipeServerStream.TransmissionMode">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.IO.Pipes.NamedPipeClientStream">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:System.IO.Pipes.NamedPipeClientStream(System.String)">
            <param name="pipeName">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:System.IO.Pipes.NamedPipeClientStream(System.String,System.String)">
            <param name="serverName">To be added.</param>
            <param name="pipeName">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:System.IO.Pipes.NamedPipeClientStream(System.String,System.String,System.IO.Pipes.PipeDirection)">
            <param name="serverName">To be added.</param>
            <param name="pipeName">To be added.</param>
            <param name="direction">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:System.IO.Pipes.NamedPipeClientStream(System.IO.Pipes.PipeDirection,System.Boolean,System.Boolean,Microsoft.Win32.SafeHandles.SafePipeHandle)">
            <param name="direction">To be added.</param>
            <param name="isAsync">To be added.</param>
            <param name="isConnected">To be added.</param>
            <param name="safePipeHandle">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:System.IO.Pipes.NamedPipeClientStream(System.String,System.String,System.IO.Pipes.PipeDirection,System.IO.Pipes.PipeOptions)">
            <param name="serverName">To be added.</param>
            <param name="pipeName">To be added.</param>
            <param name="direction">To be added.</param>
            <param name="options">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:System.IO.Pipes.NamedPipeClientStream(System.String,System.String,System.IO.Pipes.PipeDirection,System.IO.Pipes.PipeOptions,System.Security.Principal.TokenImpersonationLevel)">
            <param name="serverName">To be added.</param>
            <param name="pipeName">To be added.</param>
            <param name="direction">To be added.</param>
            <param name="options">To be added.</param>
            <param name="impersonationLevel">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:System.IO.Pipes.NamedPipeClientStream(System.String,System.String,System.IO.Pipes.PipeAccessRights,System.IO.Pipes.PipeOptions,System.Security.Principal.TokenImpersonationLevel,System.IO.HandleInheritability)">
            <param name="serverName">To be added.</param>
            <param name="pipeName">To be added.</param>
            <param name="desiredAccessRights">To be added.</param>
            <param name="options">To be added.</param>
            <param name="impersonationLevel">To be added.</param>
            <param name="inheritability">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:System.IO.Pipes.NamedPipeClientStream(System.String,System.String,System.IO.Pipes.PipeDirection,System.IO.Pipes.PipeOptions,System.Security.Principal.TokenImpersonationLevel,System.IO.HandleInheritability)">
            <param name="serverName">To be added.</param>
            <param name="pipeName">To be added.</param>
            <param name="direction">To be added.</param>
            <param name="options">To be added.</param>
            <param name="impersonationLevel">To be added.</param>
            <param name="inheritability">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.IO.Pipes.NamedPipeClientStream.CheckPipePropertyOperations">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.IO.Pipes.NamedPipeClientStream.Connect">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.IO.Pipes.NamedPipeClientStream.Connect(System.Int32)">
            <param name="timeout">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.IO.Pipes.NamedPipeClientStream.ConnectAsync">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.IO.Pipes.NamedPipeClientStream.ConnectAsync(System.Int32)">
            <param name="timeout">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.IO.Pipes.NamedPipeClientStream.ConnectAsync(System.Threading.CancellationToken)">
            <param name="cancellationToken">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.IO.Pipes.NamedPipeClientStream.ConnectAsync(System.Int32,System.Threading.CancellationToken)">
            <param name="timeout">To be added.</param>
            <param name="cancellationToken">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.IO.Pipes.NamedPipeClientStream.Finalize">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.IO.Pipes.NamedPipeClientStream.NumberOfServerInstances">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.IO.Pipes.NamedPipeServerStream">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:System.IO.Pipes.NamedPipeServerStream(System.String)">
            <param name="pipeName">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:System.IO.Pipes.NamedPipeServerStream(System.String,System.IO.Pipes.PipeDirection)">
            <param name="pipeName">To be added.</param>
            <param name="direction">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:System.IO.Pipes.NamedPipeServerStream(System.String,System.IO.Pipes.PipeDirection,System.Int32)">
            <param name="pipeName">To be added.</param>
            <param name="direction">To be added.</param>
            <param name="maxNumberOfServerInstances">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:System.IO.Pipes.NamedPipeServerStream(System.IO.Pipes.PipeDirection,System.Boolean,System.Boolean,Microsoft.Win32.SafeHandles.SafePipeHandle)">
            <param name="direction">To be added.</param>
            <param name="isAsync">To be added.</param>
            <param name="isConnected">To be added.</param>
            <param name="safePipeHandle">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:System.IO.Pipes.NamedPipeServerStream(System.String,System.IO.Pipes.PipeDirection,System.Int32,System.IO.Pipes.PipeTransmissionMode)">
            <param name="pipeName">To be added.</param>
            <param name="direction">To be added.</param>
            <param name="maxNumberOfServerInstances">To be added.</param>
            <param name="transmissionMode">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:System.IO.Pipes.NamedPipeServerStream(System.String,System.IO.Pipes.PipeDirection,System.Int32,System.IO.Pipes.PipeTransmissionMode,System.IO.Pipes.PipeOptions)">
            <param name="pipeName">To be added.</param>
            <param name="direction">To be added.</param>
            <param name="maxNumberOfServerInstances">To be added.</param>
            <param name="transmissionMode">To be added.</param>
            <param name="options">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:System.IO.Pipes.NamedPipeServerStream(System.String,System.IO.Pipes.PipeDirection,System.Int32,System.IO.Pipes.PipeTransmissionMode,System.IO.Pipes.PipeOptions,System.Int32,System.Int32)">
            <param name="pipeName">To be added.</param>
            <param name="direction">To be added.</param>
            <param name="maxNumberOfServerInstances">To be added.</param>
            <param name="transmissionMode">To be added.</param>
            <param name="options">To be added.</param>
            <param name="inBufferSize">To be added.</param>
            <param name="outBufferSize">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:System.IO.Pipes.NamedPipeServerStream(System.String,System.IO.Pipes.PipeDirection,System.Int32,System.IO.Pipes.PipeTransmissionMode,System.IO.Pipes.PipeOptions,System.Int32,System.Int32,System.IO.Pipes.PipeSecurity)">
            <param name="pipeName">To be added.</param>
            <param name="direction">To be added.</param>
            <param name="maxNumberOfServerInstances">To be added.</param>
            <param name="transmissionMode">To be added.</param>
            <param name="options">To be added.</param>
            <param name="inBufferSize">To be added.</param>
            <param name="outBufferSize">To be added.</param>
            <param name="pipeSecurity">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:System.IO.Pipes.NamedPipeServerStream(System.String,System.IO.Pipes.PipeDirection,System.Int32,System.IO.Pipes.PipeTransmissionMode,System.IO.Pipes.PipeOptions,System.Int32,System.Int32,System.IO.Pipes.PipeSecurity,System.IO.HandleInheritability)">
            <param name="pipeName">To be added.</param>
            <param name="direction">To be added.</param>
            <param name="maxNumberOfServerInstances">To be added.</param>
            <param name="transmissionMode">To be added.</param>
            <param name="options">To be added.</param>
            <param name="inBufferSize">To be added.</param>
            <param name="outBufferSize">To be added.</param>
            <param name="pipeSecurity">To be added.</param>
            <param name="inheritability">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:System.IO.Pipes.NamedPipeServerStream(System.String,System.IO.Pipes.PipeDirection,System.Int32,System.IO.Pipes.PipeTransmissionMode,System.IO.Pipes.PipeOptions,System.Int32,System.Int32,System.IO.Pipes.PipeSecurity,System.IO.HandleInheritability,System.IO.Pipes.PipeAccessRights)">
            <param name="pipeName">To be added.</param>
            <param name="direction">To be added.</param>
            <param name="maxNumberOfServerInstances">To be added.</param>
            <param name="transmissionMode">To be added.</param>
            <param name="options">To be added.</param>
            <param name="inBufferSize">To be added.</param>
            <param name="outBufferSize">To be added.</param>
            <param name="pipeSecurity">To be added.</param>
            <param name="inheritability">To be added.</param>
            <param name="additionalAccessRights">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.IO.Pipes.NamedPipeServerStream.BeginWaitForConnection(System.AsyncCallback,System.Object)">
            <param name="callback">To be added.</param>
            <param name="state">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.IO.Pipes.NamedPipeServerStream.Disconnect">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.IO.Pipes.NamedPipeServerStream.EndWaitForConnection(System.IAsyncResult)">
            <param name="asyncResult">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.IO.Pipes.NamedPipeServerStream.Finalize">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.IO.Pipes.NamedPipeServerStream.GetImpersonationUserName">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:System.IO.Pipes.NamedPipeServerStream.MaxAllowedServerInstances">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.IO.Pipes.NamedPipeServerStream.RunAsClient(System.IO.Pipes.PipeStreamImpersonationWorker)">
            <param name="impersonationWorker">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.IO.Pipes.NamedPipeServerStream.WaitForConnection">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.IO.Pipes.NamedPipeServerStream.WaitForConnectionAsync">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.IO.Pipes.NamedPipeServerStream.WaitForConnectionAsync(System.Threading.CancellationToken)">
            <param name="cancellationToken">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.IO.Pipes.PipeAccessRights">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:System.IO.Pipes.PipeAccessRights.AccessSystemSecurity">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.IO.Pipes.PipeAccessRights.ChangePermissions">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.IO.Pipes.PipeAccessRights.CreateNewInstance">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.IO.Pipes.PipeAccessRights.Delete">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.IO.Pipes.PipeAccessRights.FullControl">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.IO.Pipes.PipeAccessRights.Read">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.IO.Pipes.PipeAccessRights.ReadAttributes">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.IO.Pipes.PipeAccessRights.ReadData">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.IO.Pipes.PipeAccessRights.ReadExtendedAttributes">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.IO.Pipes.PipeAccessRights.ReadPermissions">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.IO.Pipes.PipeAccessRights.ReadWrite">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.IO.Pipes.PipeAccessRights.Synchronize">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.IO.Pipes.PipeAccessRights.TakeOwnership">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.IO.Pipes.PipeAccessRights.Write">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.IO.Pipes.PipeAccessRights.WriteAttributes">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.IO.Pipes.PipeAccessRights.WriteData">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.IO.Pipes.PipeAccessRights.WriteExtendedAttributes">
            <summary>To be added.</summary>
        </member>
        <member name="T:System.IO.Pipes.PipeAccessRule">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:System.IO.Pipes.PipeAccessRule(System.Security.Principal.IdentityReference,System.IO.Pipes.PipeAccessRights,System.Security.AccessControl.AccessControlType)">
            <param name="identity">To be added.</param>
            <param name="rights">To be added.</param>
            <param name="type">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:System.IO.Pipes.PipeAccessRule(System.String,System.IO.Pipes.PipeAccessRights,System.Security.AccessControl.AccessControlType)">
            <param name="identity">To be added.</param>
            <param name="rights">To be added.</param>
            <param name="type">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.IO.Pipes.PipeAccessRule.PipeAccessRights">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.IO.Pipes.PipeAuditRule">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:System.IO.Pipes.PipeAuditRule(System.Security.Principal.IdentityReference,System.IO.Pipes.PipeAccessRights,System.Security.AccessControl.AuditFlags)">
            <param name="identity">To be added.</param>
            <param name="rights">To be added.</param>
            <param name="flags">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:System.IO.Pipes.PipeAuditRule(System.String,System.IO.Pipes.PipeAccessRights,System.Security.AccessControl.AuditFlags)">
            <param name="identity">To be added.</param>
            <param name="rights">To be added.</param>
            <param name="flags">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.IO.Pipes.PipeAuditRule.PipeAccessRights">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.IO.Pipes.PipeDirection">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:System.IO.Pipes.PipeDirection.In">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.IO.Pipes.PipeDirection.InOut">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.IO.Pipes.PipeDirection.Out">
            <summary>To be added.</summary>
        </member>
        <member name="T:System.IO.Pipes.PipeOptions">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:System.IO.Pipes.PipeOptions.Asynchronous">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.IO.Pipes.PipeOptions.None">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.IO.Pipes.PipeOptions.WriteThrough">
            <summary>To be added.</summary>
        </member>
        <member name="T:System.IO.Pipes.PipeSecurity">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:System.IO.Pipes.PipeSecurity">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.IO.Pipes.PipeSecurity.AccessRightType">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.IO.Pipes.PipeSecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
            <param name="identityReference">To be added.</param>
            <param name="accessMask">To be added.</param>
            <param name="isInherited">To be added.</param>
            <param name="inheritanceFlags">To be added.</param>
            <param name="propagationFlags">To be added.</param>
            <param name="type">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.IO.Pipes.PipeSecurity.AccessRuleType">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.IO.Pipes.PipeSecurity.AddAccessRule(System.IO.Pipes.PipeAccessRule)">
            <param name="rule">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.IO.Pipes.PipeSecurity.AddAuditRule(System.IO.Pipes.PipeAuditRule)">
            <param name="rule">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.IO.Pipes.PipeSecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)">
            <param name="identityReference">To be added.</param>
            <param name="accessMask">To be added.</param>
            <param name="isInherited">To be added.</param>
            <param name="inheritanceFlags">To be added.</param>
            <param name="propagationFlags">To be added.</param>
            <param name="flags">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.IO.Pipes.PipeSecurity.AuditRuleType">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.IO.Pipes.PipeSecurity.Persist(System.Runtime.InteropServices.SafeHandle)">
            <param name="handle">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.IO.Pipes.PipeSecurity.Persist(System.String)">
            <param name="name">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.IO.Pipes.PipeSecurity.RemoveAccessRule(System.IO.Pipes.PipeAccessRule)">
            <param name="rule">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.IO.Pipes.PipeSecurity.RemoveAccessRuleSpecific(System.IO.Pipes.PipeAccessRule)">
            <param name="rule">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.IO.Pipes.PipeSecurity.RemoveAuditRule(System.IO.Pipes.PipeAuditRule)">
            <param name="rule">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.IO.Pipes.PipeSecurity.RemoveAuditRuleAll(System.IO.Pipes.PipeAuditRule)">
            <param name="rule">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.IO.Pipes.PipeSecurity.RemoveAuditRuleSpecific(System.IO.Pipes.PipeAuditRule)">
            <param name="rule">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.IO.Pipes.PipeSecurity.ResetAccessRule(System.IO.Pipes.PipeAccessRule)">
            <param name="rule">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.IO.Pipes.PipeSecurity.SetAccessRule(System.IO.Pipes.PipeAccessRule)">
            <param name="rule">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.IO.Pipes.PipeSecurity.SetAuditRule(System.IO.Pipes.PipeAuditRule)">
            <param name="rule">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.IO.Pipes.PipeStream">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:System.IO.Pipes.PipeStream(System.IO.Pipes.PipeDirection,System.Int32)">
            <param name="direction">To be added.</param>
            <param name="bufferSize">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:System.IO.Pipes.PipeStream(System.IO.Pipes.PipeDirection,System.IO.Pipes.PipeTransmissionMode,System.Int32)">
            <param name="direction">To be added.</param>
            <param name="transmissionMode">To be added.</param>
            <param name="outBufferSize">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.IO.Pipes.PipeStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <param name="buffer">To be added.</param>
            <param name="offset">To be added.</param>
            <param name="count">To be added.</param>
            <param name="callback">To be added.</param>
            <param name="state">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.IO.Pipes.PipeStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <param name="buffer">To be added.</param>
            <param name="offset">To be added.</param>
            <param name="count">To be added.</param>
            <param name="callback">To be added.</param>
            <param name="state">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.IO.Pipes.PipeStream.CanRead">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.IO.Pipes.PipeStream.CanSeek">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.IO.Pipes.PipeStream.CanWrite">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.IO.Pipes.PipeStream.CheckPipePropertyOperations">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.IO.Pipes.PipeStream.CheckReadOperations">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.IO.Pipes.PipeStream.CheckWriteOperations">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.IO.Pipes.PipeStream.Dispose(System.Boolean)">
            <param name="disposing">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.IO.Pipes.PipeStream.EndRead(System.IAsyncResult)">
            <param name="asyncResult">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.IO.Pipes.PipeStream.EndWrite(System.IAsyncResult)">
            <param name="asyncResult">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.IO.Pipes.PipeStream.Flush">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.IO.Pipes.PipeStream.GetAccessControl">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.IO.Pipes.PipeStream.InBufferSize">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.IO.Pipes.PipeStream.InitializeHandle(Microsoft.Win32.SafeHandles.SafePipeHandle,System.Boolean,System.Boolean)">
            <param name="handle">To be added.</param>
            <param name="isExposed">To be added.</param>
            <param name="isAsync">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.IO.Pipes.PipeStream.IsAsync">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.IO.Pipes.PipeStream.IsConnected">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.IO.Pipes.PipeStream.IsHandleExposed">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.IO.Pipes.PipeStream.IsMessageComplete">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.IO.Pipes.PipeStream.Length">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.IO.Pipes.PipeStream.OutBufferSize">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.IO.Pipes.PipeStream.Position">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.IO.Pipes.PipeStream.Read(System.Byte[],System.Int32,System.Int32)">
            <param name="buffer">To be added.</param>
            <param name="offset">To be added.</param>
            <param name="count">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.IO.Pipes.PipeStream.ReadByte">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.IO.Pipes.PipeStream.ReadMode">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.IO.Pipes.PipeStream.SafePipeHandle">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.IO.Pipes.PipeStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <param name="offset">To be added.</param>
            <param name="origin">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.IO.Pipes.PipeStream.SetAccessControl(System.IO.Pipes.PipeSecurity)">
            <param name="pipeSecurity">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.IO.Pipes.PipeStream.SetLength(System.Int64)">
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.IO.Pipes.PipeStream.TransmissionMode">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.IO.Pipes.PipeStream.WaitForPipeDrain">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.IO.Pipes.PipeStream.Write(System.Byte[],System.Int32,System.Int32)">
            <param name="buffer">To be added.</param>
            <param name="offset">To be added.</param>
            <param name="count">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.IO.Pipes.PipeStream.WriteByte(System.Byte)">
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.IO.Pipes.PipeStreamImpersonationWorker">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.IO.Pipes.PipeTransmissionMode">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:System.IO.Pipes.PipeTransmissionMode.Byte">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.IO.Pipes.PipeTransmissionMode.Message">
            <summary>To be added.</summary>
        </member>
        <member name="T:System.Linq.Enumerable">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="func">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})">
            <typeparam name="TSource">To be added.</typeparam>
            <typeparam name="TAccumulate">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="seed">To be added.</param>
            <param name="func">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})">
            <typeparam name="TSource">To be added.</typeparam>
            <typeparam name="TAccumulate">To be added.</typeparam>
            <typeparam name="TResult">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="seed">To be added.</param>
            <param name="func">To be added.</param>
            <param name="resultSelector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="predicate">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="predicate">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Append``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="element">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.AsEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Decimal})">
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Double})">
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int32})">
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int64})">
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Single})">
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="selector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="selector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="selector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="selector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="selector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="selector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="selector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="selector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="selector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="selector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)">
            <typeparam name="TResult">To be added.</typeparam>
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="first">To be added.</param>
            <param name="second">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="value">To be added.</param>
            <param name="comparer">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="predicate">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="defaultValue">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="comparer">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="index">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="index">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Empty``1">
            <typeparam name="TResult">To be added.</typeparam>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="first">To be added.</param>
            <param name="second">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="first">To be added.</param>
            <param name="second">To be added.</param>
            <param name="comparer">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="predicate">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="predicate">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <typeparam name="TSource">To be added.</typeparam>
            <typeparam name="TKey">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="keySelector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <typeparam name="TSource">To be added.</typeparam>
            <typeparam name="TKey">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="keySelector">To be added.</param>
            <param name="comparer">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
            <typeparam name="TSource">To be added.</typeparam>
            <typeparam name="TKey">To be added.</typeparam>
            <typeparam name="TElement">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="keySelector">To be added.</param>
            <param name="elementSelector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
            <typeparam name="TSource">To be added.</typeparam>
            <typeparam name="TKey">To be added.</typeparam>
            <typeparam name="TElement">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="keySelector">To be added.</param>
            <param name="elementSelector">To be added.</param>
            <param name="comparer">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})">
            <typeparam name="TSource">To be added.</typeparam>
            <typeparam name="TKey">To be added.</typeparam>
            <typeparam name="TResult">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="keySelector">To be added.</param>
            <param name="resultSelector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})">
            <typeparam name="TSource">To be added.</typeparam>
            <typeparam name="TKey">To be added.</typeparam>
            <typeparam name="TResult">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="keySelector">To be added.</param>
            <param name="resultSelector">To be added.</param>
            <param name="comparer">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})">
            <typeparam name="TSource">To be added.</typeparam>
            <typeparam name="TKey">To be added.</typeparam>
            <typeparam name="TElement">To be added.</typeparam>
            <typeparam name="TResult">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="keySelector">To be added.</param>
            <param name="elementSelector">To be added.</param>
            <param name="resultSelector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})">
            <typeparam name="TSource">To be added.</typeparam>
            <typeparam name="TKey">To be added.</typeparam>
            <typeparam name="TElement">To be added.</typeparam>
            <typeparam name="TResult">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="keySelector">To be added.</param>
            <param name="elementSelector">To be added.</param>
            <param name="resultSelector">To be added.</param>
            <param name="comparer">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
            <typeparam name="TOuter">To be added.</typeparam>
            <typeparam name="TInner">To be added.</typeparam>
            <typeparam name="TKey">To be added.</typeparam>
            <typeparam name="TResult">To be added.</typeparam>
            <param name="outer">To be added.</param>
            <param name="inner">To be added.</param>
            <param name="outerKeySelector">To be added.</param>
            <param name="innerKeySelector">To be added.</param>
            <param name="resultSelector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
            <typeparam name="TOuter">To be added.</typeparam>
            <typeparam name="TInner">To be added.</typeparam>
            <typeparam name="TKey">To be added.</typeparam>
            <typeparam name="TResult">To be added.</typeparam>
            <param name="outer">To be added.</param>
            <param name="inner">To be added.</param>
            <param name="outerKeySelector">To be added.</param>
            <param name="innerKeySelector">To be added.</param>
            <param name="resultSelector">To be added.</param>
            <param name="comparer">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="first">To be added.</param>
            <param name="second">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="first">To be added.</param>
            <param name="second">To be added.</param>
            <param name="comparer">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
            <typeparam name="TOuter">To be added.</typeparam>
            <typeparam name="TInner">To be added.</typeparam>
            <typeparam name="TKey">To be added.</typeparam>
            <typeparam name="TResult">To be added.</typeparam>
            <param name="outer">To be added.</param>
            <param name="inner">To be added.</param>
            <param name="outerKeySelector">To be added.</param>
            <param name="innerKeySelector">To be added.</param>
            <param name="resultSelector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
            <typeparam name="TOuter">To be added.</typeparam>
            <typeparam name="TInner">To be added.</typeparam>
            <typeparam name="TKey">To be added.</typeparam>
            <typeparam name="TResult">To be added.</typeparam>
            <param name="outer">To be added.</param>
            <param name="inner">To be added.</param>
            <param name="outerKeySelector">To be added.</param>
            <param name="innerKeySelector">To be added.</param>
            <param name="resultSelector">To be added.</param>
            <param name="comparer">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="predicate">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="predicate">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="predicate">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Decimal})">
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Double})">
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int32})">
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int64})">
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Single})">
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="selector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="selector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="selector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="selector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="selector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="selector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="selector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="selector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="selector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="selector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <typeparam name="TSource">To be added.</typeparam>
            <typeparam name="TResult">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="selector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Decimal})">
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Double})">
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int32})">
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int64})">
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Single})">
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="selector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="selector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="selector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="selector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="selector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="selector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="selector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="selector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="selector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="selector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <typeparam name="TSource">To be added.</typeparam>
            <typeparam name="TResult">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="selector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)">
            <typeparam name="TResult">To be added.</typeparam>
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <typeparam name="TSource">To be added.</typeparam>
            <typeparam name="TKey">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="keySelector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <typeparam name="TSource">To be added.</typeparam>
            <typeparam name="TKey">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="keySelector">To be added.</param>
            <param name="comparer">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <typeparam name="TSource">To be added.</typeparam>
            <typeparam name="TKey">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="keySelector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <typeparam name="TSource">To be added.</typeparam>
            <typeparam name="TKey">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="keySelector">To be added.</param>
            <param name="comparer">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="element">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Range(System.Int32,System.Int32)">
            <param name="start">To be added.</param>
            <param name="count">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Repeat``1(``0,System.Int32)">
            <typeparam name="TResult">To be added.</typeparam>
            <param name="element">To be added.</param>
            <param name="count">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Reverse``1(System.Collections.Generic.IEnumerable{``0})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})">
            <typeparam name="TSource">To be added.</typeparam>
            <typeparam name="TResult">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="selector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <typeparam name="TSource">To be added.</typeparam>
            <typeparam name="TResult">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="selector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
            <typeparam name="TSource">To be added.</typeparam>
            <typeparam name="TResult">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="selector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})">
            <typeparam name="TSource">To be added.</typeparam>
            <typeparam name="TResult">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="selector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
            <typeparam name="TSource">To be added.</typeparam>
            <typeparam name="TCollection">To be added.</typeparam>
            <typeparam name="TResult">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="collectionSelector">To be added.</param>
            <param name="resultSelector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
            <typeparam name="TSource">To be added.</typeparam>
            <typeparam name="TCollection">To be added.</typeparam>
            <typeparam name="TResult">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="collectionSelector">To be added.</param>
            <param name="resultSelector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="first">To be added.</param>
            <param name="second">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="first">To be added.</param>
            <param name="second">To be added.</param>
            <param name="comparer">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="predicate">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="predicate">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="count">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="predicate">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="predicate">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Decimal})">
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Double})">
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int32})">
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int64})">
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Single})">
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="selector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="selector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="selector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="selector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="selector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="selector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="selector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="selector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="selector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="selector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="count">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="predicate">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="predicate">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
            <typeparam name="TSource">To be added.</typeparam>
            <typeparam name="TKey">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="keySelector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <typeparam name="TSource">To be added.</typeparam>
            <typeparam name="TKey">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="keySelector">To be added.</param>
            <param name="comparer">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
            <typeparam name="TSource">To be added.</typeparam>
            <typeparam name="TKey">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="keySelector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <typeparam name="TSource">To be added.</typeparam>
            <typeparam name="TKey">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="keySelector">To be added.</param>
            <param name="comparer">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <typeparam name="TSource">To be added.</typeparam>
            <typeparam name="TKey">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="keySelector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <typeparam name="TSource">To be added.</typeparam>
            <typeparam name="TKey">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="keySelector">To be added.</param>
            <param name="comparer">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
            <typeparam name="TSource">To be added.</typeparam>
            <typeparam name="TKey">To be added.</typeparam>
            <typeparam name="TElement">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="keySelector">To be added.</param>
            <param name="elementSelector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
            <typeparam name="TSource">To be added.</typeparam>
            <typeparam name="TKey">To be added.</typeparam>
            <typeparam name="TElement">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="keySelector">To be added.</param>
            <param name="elementSelector">To be added.</param>
            <param name="comparer">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <typeparam name="TSource">To be added.</typeparam>
            <typeparam name="TKey">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="keySelector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <typeparam name="TSource">To be added.</typeparam>
            <typeparam name="TKey">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="keySelector">To be added.</param>
            <param name="comparer">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
            <typeparam name="TSource">To be added.</typeparam>
            <typeparam name="TKey">To be added.</typeparam>
            <typeparam name="TElement">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="keySelector">To be added.</param>
            <param name="elementSelector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
            <typeparam name="TSource">To be added.</typeparam>
            <typeparam name="TKey">To be added.</typeparam>
            <typeparam name="TElement">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="keySelector">To be added.</param>
            <param name="elementSelector">To be added.</param>
            <param name="comparer">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="first">To be added.</param>
            <param name="second">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="first">To be added.</param>
            <param name="second">To be added.</param>
            <param name="comparer">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="predicate">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="predicate">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
            <typeparam name="TFirst">To be added.</typeparam>
            <typeparam name="TSecond">To be added.</typeparam>
            <typeparam name="TResult">To be added.</typeparam>
            <param name="first">To be added.</param>
            <param name="second">To be added.</param>
            <param name="resultSelector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.Linq.EnumerableExecutor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:System.Linq.EnumerableExecutor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.Linq.EnumerableExecutor`1">
            <typeparam name="T">To be added.</typeparam>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:System.Linq.EnumerableExecutor`1(`0System`0.`0Linq`0.`0Expressions`0.`0Expression`0)">
            <param name="expression">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.Linq.EnumerableQuery">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:System.Linq.EnumerableQuery">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.Linq.EnumerableQuery`1">
            <typeparam name="T">To be added.</typeparam>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:System.Linq.EnumerableQuery`1(`0System`0.`0Collections`0.`0Generic`0.`0IEnumerable`0{`0T`0})">
            <param name="enumerable">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:System.Linq.EnumerableQuery`1(`0System`0.`0Linq`0.`0Expressions`0.`0Expression`0)">
            <param name="expression">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.EnumerableQuery`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.EnumerableQuery`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.EnumerableQuery`1.System#Linq#IQueryable#ElementType">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.EnumerableQuery`1.System#Linq#IQueryable#Expression">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.EnumerableQuery`1.System#Linq#IQueryable#Provider">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.EnumerableQuery`1.System#Linq#IQueryProvider#CreateQuery(`0System`0.`0Linq`0.`0Expressions`0.`0Expression`0)">
            <param name="expression">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.EnumerableQuery`1.System#Linq#IQueryProvider#CreateQuery``1(`0System`0.`0Linq`0.`0Expressions`0.`0Expression`0)">
            <typeparam name="S">To be added.</typeparam>
            <param name="expression">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.EnumerableQuery`1.System#Linq#IQueryProvider#Execute(`0System`0.`0Linq`0.`0Expressions`0.`0Expression`0)">
            <param name="expression">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.EnumerableQuery`1.System#Linq#IQueryProvider#Execute``1(`0System`0.`0Linq`0.`0Expressions`0.`0Expression`0)">
            <typeparam name="S">To be added.</typeparam>
            <param name="expression">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.EnumerableQuery`1.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.Linq.IGrouping`2">
            <typeparam name="TKey">To be added.</typeparam>
            <typeparam name="TElement">To be added.</typeparam>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.IGrouping`2.Key">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.Linq.ILookup`2">
            <typeparam name="TKey">To be added.</typeparam>
            <typeparam name="TElement">To be added.</typeparam>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ILookup`2.Contains(``10TKey`1``10`1)">
            <param name="key">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.ILookup`2.Count">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.ILookup`2.Item(``10TKey`1``10`1)">
            <param name="key">To be added.</param>
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.Linq.IOrderedEnumerable`1">
            <typeparam name="TElement">To be added.</typeparam>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.IOrderedEnumerable`1.CreateOrderedEnumerable``1(`0System`0.`0Func`0{`0TElement`0,`0TKey`0},`0System`0.`0Collections`0.`0Generic`0.`0IComparer`0{`0TKey`0},`0System`0.`0Boolean`0)">
            <typeparam name="TKey">To be added.</typeparam>
            <param name="keySelector">To be added.</param>
            <param name="comparer">To be added.</param>
            <param name="descending">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.Linq.IOrderedQueryable">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.Linq.IOrderedQueryable`1">
            <typeparam name="T">To be added.</typeparam>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.Linq.IQueryable">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.IQueryable.ElementType">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.IQueryable.Expression">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.IQueryable.Provider">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.Linq.IQueryable`1">
            <typeparam name="T">To be added.</typeparam>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.Linq.IQueryProvider">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.IQueryProvider.CreateQuery(System.Linq.Expressions.Expression)">
            <param name="expression">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.IQueryProvider.CreateQuery``1(System.Linq.Expressions.Expression)">
            <typeparam name="TElement">To be added.</typeparam>
            <param name="expression">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.IQueryProvider.Execute(System.Linq.Expressions.Expression)">
            <param name="expression">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.IQueryProvider.Execute``1(System.Linq.Expressions.Expression)">
            <typeparam name="TResult">To be added.</typeparam>
            <param name="expression">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.Linq.Lookup`2">
            <typeparam name="TKey">To be added.</typeparam>
            <typeparam name="TElement">To be added.</typeparam>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Lookup`2.ApplyResultSelector``1(``10System`1``10`1.``10Func`1``10`1{``10TKey`1``10`1,``10System`1``10`1.``10Collections`1``10`1.``10Generic`1``10`1.``10IEnumerable`1``10`1{``10TElement`1``10`1},``10TResult`1``10`1})">
            <typeparam name="TResult">To be added.</typeparam>
            <param name="resultSelector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Lookup`2.Contains(``10TKey`1``10`1)">
            <param name="key">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Lookup`2.Count">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Lookup`2.GetEnumerator">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Lookup`2.Item(``10TKey`1``10`1)">
            <param name="key">To be added.</param>
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Lookup`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.Linq.OrderedParallelQuery`1">
            <typeparam name="TSource">To be added.</typeparam>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.OrderedParallelQuery`1.GetEnumerator">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.Linq.ParallelEnumerable">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.Aggregate``1(System.Linq.ParallelQuery{``0},System.Func{``0,``0,``0})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="func">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.Aggregate``2(System.Linq.ParallelQuery{``0},``1,System.Func{``1,``0,``1})">
            <typeparam name="TSource">To be added.</typeparam>
            <typeparam name="TAccumulate">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="seed">To be added.</param>
            <param name="func">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.Aggregate``3(System.Linq.ParallelQuery{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})">
            <typeparam name="TSource">To be added.</typeparam>
            <typeparam name="TAccumulate">To be added.</typeparam>
            <typeparam name="TResult">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="seed">To be added.</param>
            <param name="func">To be added.</param>
            <param name="resultSelector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.Aggregate``3(System.Linq.ParallelQuery{``0},System.Func{``1},System.Func{``1,``0,``1},System.Func{``1,``1,``1},System.Func{``1,``2})">
            <typeparam name="TSource">To be added.</typeparam>
            <typeparam name="TAccumulate">To be added.</typeparam>
            <typeparam name="TResult">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="seedFactory">To be added.</param>
            <param name="updateAccumulatorFunc">To be added.</param>
            <param name="combineAccumulatorsFunc">To be added.</param>
            <param name="resultSelector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.Aggregate``3(System.Linq.ParallelQuery{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``1,``1},System.Func{``1,``2})">
            <typeparam name="TSource">To be added.</typeparam>
            <typeparam name="TAccumulate">To be added.</typeparam>
            <typeparam name="TResult">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="seed">To be added.</param>
            <param name="updateAccumulatorFunc">To be added.</param>
            <param name="combineAccumulatorsFunc">To be added.</param>
            <param name="resultSelector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.All``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="predicate">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.Any``1(System.Linq.ParallelQuery{``0})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.Any``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="predicate">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.AsEnumerable``1(System.Linq.ParallelQuery{``0})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.AsOrdered(System.Linq.ParallelQuery)">
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.AsOrdered``1(System.Linq.ParallelQuery{``0})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)">
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.AsParallel``1(System.Collections.Concurrent.Partitioner{``0})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.AsParallel``1(System.Collections.Generic.IEnumerable{``0})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.AsSequential``1(System.Linq.ParallelQuery{``0})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.AsUnordered``1(System.Linq.ParallelQuery{``0})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Decimal})">
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Double})">
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Int32})">
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Int64})">
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Decimal}})">
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Double}})">
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Int32}})">
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Int64}})">
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Single}})">
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Single})">
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Decimal})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="selector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Double})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="selector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="selector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int64})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="selector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Decimal}})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="selector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Double}})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="selector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int32}})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="selector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int64}})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="selector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Single}})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="selector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Single})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="selector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.Cast``1(System.Linq.ParallelQuery)">
            <typeparam name="TResult">To be added.</typeparam>
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.Concat``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="first">To be added.</param>
            <param name="second">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.Concat``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="first">To be added.</param>
            <param name="second">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.Contains``1(System.Linq.ParallelQuery{``0},``0)">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.Contains``1(System.Linq.ParallelQuery{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="value">To be added.</param>
            <param name="comparer">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.Count``1(System.Linq.ParallelQuery{``0})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.Count``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="predicate">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.DefaultIfEmpty``1(System.Linq.ParallelQuery{``0})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.DefaultIfEmpty``1(System.Linq.ParallelQuery{``0},``0)">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="defaultValue">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.Distinct``1(System.Linq.ParallelQuery{``0})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.Distinct``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="comparer">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.ElementAt``1(System.Linq.ParallelQuery{``0},System.Int32)">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="index">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.ElementAtOrDefault``1(System.Linq.ParallelQuery{``0},System.Int32)">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="index">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.Empty``1">
            <typeparam name="TResult">To be added.</typeparam>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.Except``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="first">To be added.</param>
            <param name="second">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.Except``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="first">To be added.</param>
            <param name="second">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.Except``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="first">To be added.</param>
            <param name="second">To be added.</param>
            <param name="comparer">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.Except``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="first">To be added.</param>
            <param name="second">To be added.</param>
            <param name="comparer">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.First``1(System.Linq.ParallelQuery{``0})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.First``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="predicate">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.FirstOrDefault``1(System.Linq.ParallelQuery{``0})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.FirstOrDefault``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="predicate">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.ForAll``1(System.Linq.ParallelQuery{``0},System.Action{``0})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="action">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.GroupBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})">
            <typeparam name="TSource">To be added.</typeparam>
            <typeparam name="TKey">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="keySelector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.GroupBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <typeparam name="TSource">To be added.</typeparam>
            <typeparam name="TKey">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="keySelector">To be added.</param>
            <param name="comparer">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.GroupBy``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2})">
            <typeparam name="TSource">To be added.</typeparam>
            <typeparam name="TKey">To be added.</typeparam>
            <typeparam name="TElement">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="keySelector">To be added.</param>
            <param name="elementSelector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.GroupBy``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
            <typeparam name="TSource">To be added.</typeparam>
            <typeparam name="TKey">To be added.</typeparam>
            <typeparam name="TElement">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="keySelector">To be added.</param>
            <param name="elementSelector">To be added.</param>
            <param name="comparer">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.GroupBy``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})">
            <typeparam name="TSource">To be added.</typeparam>
            <typeparam name="TKey">To be added.</typeparam>
            <typeparam name="TResult">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="keySelector">To be added.</param>
            <param name="resultSelector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.GroupBy``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})">
            <typeparam name="TSource">To be added.</typeparam>
            <typeparam name="TKey">To be added.</typeparam>
            <typeparam name="TResult">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="keySelector">To be added.</param>
            <param name="resultSelector">To be added.</param>
            <param name="comparer">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.GroupBy``4(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})">
            <typeparam name="TSource">To be added.</typeparam>
            <typeparam name="TKey">To be added.</typeparam>
            <typeparam name="TElement">To be added.</typeparam>
            <typeparam name="TResult">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="keySelector">To be added.</param>
            <param name="elementSelector">To be added.</param>
            <param name="resultSelector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.GroupBy``4(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})">
            <typeparam name="TSource">To be added.</typeparam>
            <typeparam name="TKey">To be added.</typeparam>
            <typeparam name="TElement">To be added.</typeparam>
            <typeparam name="TResult">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="keySelector">To be added.</param>
            <param name="elementSelector">To be added.</param>
            <param name="resultSelector">To be added.</param>
            <param name="comparer">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.GroupJoin``4(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
            <typeparam name="TOuter">To be added.</typeparam>
            <typeparam name="TInner">To be added.</typeparam>
            <typeparam name="TKey">To be added.</typeparam>
            <typeparam name="TResult">To be added.</typeparam>
            <param name="outer">To be added.</param>
            <param name="inner">To be added.</param>
            <param name="outerKeySelector">To be added.</param>
            <param name="innerKeySelector">To be added.</param>
            <param name="resultSelector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.GroupJoin``4(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
            <typeparam name="TOuter">To be added.</typeparam>
            <typeparam name="TInner">To be added.</typeparam>
            <typeparam name="TKey">To be added.</typeparam>
            <typeparam name="TResult">To be added.</typeparam>
            <param name="outer">To be added.</param>
            <param name="inner">To be added.</param>
            <param name="outerKeySelector">To be added.</param>
            <param name="innerKeySelector">To be added.</param>
            <param name="resultSelector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.GroupJoin``4(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
            <typeparam name="TOuter">To be added.</typeparam>
            <typeparam name="TInner">To be added.</typeparam>
            <typeparam name="TKey">To be added.</typeparam>
            <typeparam name="TResult">To be added.</typeparam>
            <param name="outer">To be added.</param>
            <param name="inner">To be added.</param>
            <param name="outerKeySelector">To be added.</param>
            <param name="innerKeySelector">To be added.</param>
            <param name="resultSelector">To be added.</param>
            <param name="comparer">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.GroupJoin``4(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
            <typeparam name="TOuter">To be added.</typeparam>
            <typeparam name="TInner">To be added.</typeparam>
            <typeparam name="TKey">To be added.</typeparam>
            <typeparam name="TResult">To be added.</typeparam>
            <param name="outer">To be added.</param>
            <param name="inner">To be added.</param>
            <param name="outerKeySelector">To be added.</param>
            <param name="innerKeySelector">To be added.</param>
            <param name="resultSelector">To be added.</param>
            <param name="comparer">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.Intersect``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="first">To be added.</param>
            <param name="second">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.Intersect``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="first">To be added.</param>
            <param name="second">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.Intersect``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="first">To be added.</param>
            <param name="second">To be added.</param>
            <param name="comparer">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.Intersect``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="first">To be added.</param>
            <param name="second">To be added.</param>
            <param name="comparer">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.Join``4(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
            <typeparam name="TOuter">To be added.</typeparam>
            <typeparam name="TInner">To be added.</typeparam>
            <typeparam name="TKey">To be added.</typeparam>
            <typeparam name="TResult">To be added.</typeparam>
            <param name="outer">To be added.</param>
            <param name="inner">To be added.</param>
            <param name="outerKeySelector">To be added.</param>
            <param name="innerKeySelector">To be added.</param>
            <param name="resultSelector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.Join``4(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
            <typeparam name="TOuter">To be added.</typeparam>
            <typeparam name="TInner">To be added.</typeparam>
            <typeparam name="TKey">To be added.</typeparam>
            <typeparam name="TResult">To be added.</typeparam>
            <param name="outer">To be added.</param>
            <param name="inner">To be added.</param>
            <param name="outerKeySelector">To be added.</param>
            <param name="innerKeySelector">To be added.</param>
            <param name="resultSelector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.Join``4(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
            <typeparam name="TOuter">To be added.</typeparam>
            <typeparam name="TInner">To be added.</typeparam>
            <typeparam name="TKey">To be added.</typeparam>
            <typeparam name="TResult">To be added.</typeparam>
            <param name="outer">To be added.</param>
            <param name="inner">To be added.</param>
            <param name="outerKeySelector">To be added.</param>
            <param name="innerKeySelector">To be added.</param>
            <param name="resultSelector">To be added.</param>
            <param name="comparer">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.Join``4(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
            <typeparam name="TOuter">To be added.</typeparam>
            <typeparam name="TInner">To be added.</typeparam>
            <typeparam name="TKey">To be added.</typeparam>
            <typeparam name="TResult">To be added.</typeparam>
            <param name="outer">To be added.</param>
            <param name="inner">To be added.</param>
            <param name="outerKeySelector">To be added.</param>
            <param name="innerKeySelector">To be added.</param>
            <param name="resultSelector">To be added.</param>
            <param name="comparer">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.Last``1(System.Linq.ParallelQuery{``0})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.Last``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="predicate">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.LastOrDefault``1(System.Linq.ParallelQuery{``0})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.LastOrDefault``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="predicate">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.LongCount``1(System.Linq.ParallelQuery{``0})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.LongCount``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="predicate">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Decimal})">
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Double})">
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Int32})">
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Int64})">
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Decimal}})">
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Double}})">
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Int32}})">
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Int64}})">
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Single}})">
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Single})">
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Decimal})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="selector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Double})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="selector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="selector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int64})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="selector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Decimal}})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="selector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Double}})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="selector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int32}})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="selector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int64}})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="selector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Single}})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="selector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Single})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="selector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.Max``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})">
            <typeparam name="TSource">To be added.</typeparam>
            <typeparam name="TResult">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="selector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Decimal})">
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Double})">
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Int32})">
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Int64})">
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Decimal}})">
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Double}})">
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Int32}})">
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Int64}})">
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Single}})">
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Single})">
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Decimal})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="selector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Double})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="selector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="selector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int64})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="selector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Decimal}})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="selector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Double}})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="selector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int32}})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="selector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int64}})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="selector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Single}})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="selector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Single})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="selector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.Min``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})">
            <typeparam name="TSource">To be added.</typeparam>
            <typeparam name="TResult">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="selector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.OfType``1(System.Linq.ParallelQuery)">
            <typeparam name="TResult">To be added.</typeparam>
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.OrderBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})">
            <typeparam name="TSource">To be added.</typeparam>
            <typeparam name="TKey">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="keySelector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.OrderBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <typeparam name="TSource">To be added.</typeparam>
            <typeparam name="TKey">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="keySelector">To be added.</param>
            <param name="comparer">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.OrderByDescending``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})">
            <typeparam name="TSource">To be added.</typeparam>
            <typeparam name="TKey">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="keySelector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.OrderByDescending``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <typeparam name="TSource">To be added.</typeparam>
            <typeparam name="TKey">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="keySelector">To be added.</param>
            <param name="comparer">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.Range(System.Int32,System.Int32)">
            <param name="start">To be added.</param>
            <param name="count">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.Repeat``1(``0,System.Int32)">
            <typeparam name="TResult">To be added.</typeparam>
            <param name="element">To be added.</param>
            <param name="count">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.Reverse``1(System.Linq.ParallelQuery{``0})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.Select``2(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,``1})">
            <typeparam name="TSource">To be added.</typeparam>
            <typeparam name="TResult">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="selector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.Select``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})">
            <typeparam name="TSource">To be added.</typeparam>
            <typeparam name="TResult">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="selector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.SelectMany``2(System.Linq.ParallelQuery{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
            <typeparam name="TSource">To be added.</typeparam>
            <typeparam name="TResult">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="selector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.SelectMany``2(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})">
            <typeparam name="TSource">To be added.</typeparam>
            <typeparam name="TResult">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="selector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.SelectMany``3(System.Linq.ParallelQuery{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
            <typeparam name="TSource">To be added.</typeparam>
            <typeparam name="TCollection">To be added.</typeparam>
            <typeparam name="TResult">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="collectionSelector">To be added.</param>
            <param name="resultSelector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.SelectMany``3(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
            <typeparam name="TSource">To be added.</typeparam>
            <typeparam name="TCollection">To be added.</typeparam>
            <typeparam name="TResult">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="collectionSelector">To be added.</param>
            <param name="resultSelector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.SequenceEqual``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="first">To be added.</param>
            <param name="second">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.SequenceEqual``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="first">To be added.</param>
            <param name="second">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.SequenceEqual``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="first">To be added.</param>
            <param name="second">To be added.</param>
            <param name="comparer">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.SequenceEqual``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="first">To be added.</param>
            <param name="second">To be added.</param>
            <param name="comparer">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.Single``1(System.Linq.ParallelQuery{``0})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.Single``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="predicate">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.SingleOrDefault``1(System.Linq.ParallelQuery{``0})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.SingleOrDefault``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="predicate">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.Skip``1(System.Linq.ParallelQuery{``0},System.Int32)">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="count">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.SkipWhile``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="predicate">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.SkipWhile``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Boolean})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="predicate">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Decimal})">
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Double})">
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Int32})">
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Int64})">
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Decimal}})">
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Double}})">
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Int32}})">
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Int64}})">
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Single}})">
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Single})">
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Decimal})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="selector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Double})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="selector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="selector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int64})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="selector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Decimal}})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="selector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Double}})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="selector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int32}})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="selector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int64}})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="selector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Single}})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="selector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Single})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="selector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.Take``1(System.Linq.ParallelQuery{``0},System.Int32)">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="count">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.TakeWhile``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="predicate">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.TakeWhile``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Boolean})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="predicate">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.ThenBy``2(System.Linq.OrderedParallelQuery{``0},System.Func{``0,``1})">
            <typeparam name="TSource">To be added.</typeparam>
            <typeparam name="TKey">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="keySelector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.ThenBy``2(System.Linq.OrderedParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <typeparam name="TSource">To be added.</typeparam>
            <typeparam name="TKey">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="keySelector">To be added.</param>
            <param name="comparer">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.ThenByDescending``2(System.Linq.OrderedParallelQuery{``0},System.Func{``0,``1})">
            <typeparam name="TSource">To be added.</typeparam>
            <typeparam name="TKey">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="keySelector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.ThenByDescending``2(System.Linq.OrderedParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <typeparam name="TSource">To be added.</typeparam>
            <typeparam name="TKey">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="keySelector">To be added.</param>
            <param name="comparer">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.ToArray``1(System.Linq.ParallelQuery{``0})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.ToDictionary``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})">
            <typeparam name="TSource">To be added.</typeparam>
            <typeparam name="TKey">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="keySelector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.ToDictionary``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <typeparam name="TSource">To be added.</typeparam>
            <typeparam name="TKey">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="keySelector">To be added.</param>
            <param name="comparer">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.ToDictionary``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2})">
            <typeparam name="TSource">To be added.</typeparam>
            <typeparam name="TKey">To be added.</typeparam>
            <typeparam name="TElement">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="keySelector">To be added.</param>
            <param name="elementSelector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.ToDictionary``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
            <typeparam name="TSource">To be added.</typeparam>
            <typeparam name="TKey">To be added.</typeparam>
            <typeparam name="TElement">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="keySelector">To be added.</param>
            <param name="elementSelector">To be added.</param>
            <param name="comparer">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.ToList``1(System.Linq.ParallelQuery{``0})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.ToLookup``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})">
            <typeparam name="TSource">To be added.</typeparam>
            <typeparam name="TKey">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="keySelector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.ToLookup``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <typeparam name="TSource">To be added.</typeparam>
            <typeparam name="TKey">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="keySelector">To be added.</param>
            <param name="comparer">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.ToLookup``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2})">
            <typeparam name="TSource">To be added.</typeparam>
            <typeparam name="TKey">To be added.</typeparam>
            <typeparam name="TElement">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="keySelector">To be added.</param>
            <param name="elementSelector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.ToLookup``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
            <typeparam name="TSource">To be added.</typeparam>
            <typeparam name="TKey">To be added.</typeparam>
            <typeparam name="TElement">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="keySelector">To be added.</param>
            <param name="elementSelector">To be added.</param>
            <param name="comparer">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.Union``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="first">To be added.</param>
            <param name="second">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.Union``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="first">To be added.</param>
            <param name="second">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.Union``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="first">To be added.</param>
            <param name="second">To be added.</param>
            <param name="comparer">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.Union``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="first">To be added.</param>
            <param name="second">To be added.</param>
            <param name="comparer">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.Where``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="predicate">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.Where``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Boolean})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="predicate">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.WithCancellation``1(System.Linq.ParallelQuery{``0},System.Threading.CancellationToken)">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="cancellationToken">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.WithDegreeOfParallelism``1(System.Linq.ParallelQuery{``0},System.Int32)">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="degreeOfParallelism">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.WithExecutionMode``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelExecutionMode)">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="executionMode">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.WithMergeOptions``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelMergeOptions)">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="mergeOptions">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.Zip``3(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
            <typeparam name="TFirst">To be added.</typeparam>
            <typeparam name="TSecond">To be added.</typeparam>
            <typeparam name="TResult">To be added.</typeparam>
            <param name="first">To be added.</param>
            <param name="second">To be added.</param>
            <param name="resultSelector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelEnumerable.Zip``3(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``1,``2})">
            <typeparam name="TFirst">To be added.</typeparam>
            <typeparam name="TSecond">To be added.</typeparam>
            <typeparam name="TResult">To be added.</typeparam>
            <param name="first">To be added.</param>
            <param name="second">To be added.</param>
            <param name="resultSelector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.Linq.ParallelExecutionMode">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:System.Linq.ParallelExecutionMode.Default">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.Linq.ParallelExecutionMode.ForceParallelism">
            <summary>To be added.</summary>
        </member>
        <member name="T:System.Linq.ParallelMergeOptions">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:System.Linq.ParallelMergeOptions.AutoBuffered">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.Linq.ParallelMergeOptions.Default">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.Linq.ParallelMergeOptions.FullyBuffered">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.Linq.ParallelMergeOptions.NotBuffered">
            <summary>To be added.</summary>
        </member>
        <member name="T:System.Linq.ParallelQuery">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelQuery.System#Collections#IEnumerable#GetEnumerator">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.Linq.ParallelQuery`1">
            <typeparam name="TSource">To be added.</typeparam>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.ParallelQuery`1.GetEnumerator">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.Linq.Queryable">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Queryable.Aggregate``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``0,``0}})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="func">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Queryable.Aggregate``2(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}})">
            <typeparam name="TSource">To be added.</typeparam>
            <typeparam name="TAccumulate">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="seed">To be added.</param>
            <param name="func">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Queryable.Aggregate``3(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,``2}})">
            <typeparam name="TSource">To be added.</typeparam>
            <typeparam name="TAccumulate">To be added.</typeparam>
            <typeparam name="TResult">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="seed">To be added.</param>
            <param name="func">To be added.</param>
            <param name="selector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Queryable.All``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="predicate">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="predicate">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)">
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Queryable.AsQueryable``1(System.Collections.Generic.IEnumerable{``0})">
            <typeparam name="TElement">To be added.</typeparam>
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Decimal})">
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Double})">
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int32})">
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int64})">
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Decimal}})">
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Double}})">
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Int32}})">
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Int64}})">
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Single}})">
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Single})">
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="selector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="selector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="selector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="selector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="selector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="selector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="selector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="selector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="selector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="selector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Queryable.Cast``1(System.Linq.IQueryable)">
            <typeparam name="TResult">To be added.</typeparam>
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Queryable.Concat``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source1">To be added.</param>
            <param name="source2">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0)">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="item">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="item">To be added.</param>
            <param name="comparer">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="predicate">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0},``0)">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="defaultValue">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Queryable.Distinct``1(System.Linq.IQueryable{``0})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Queryable.Distinct``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="comparer">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Queryable.ElementAt``1(System.Linq.IQueryable{``0},System.Int32)">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="index">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Queryable.ElementAtOrDefault``1(System.Linq.IQueryable{``0},System.Int32)">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="index">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source1">To be added.</param>
            <param name="source2">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source1">To be added.</param>
            <param name="source2">To be added.</param>
            <param name="comparer">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Queryable.First``1(System.Linq.IQueryable{``0})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Queryable.First``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="predicate">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="predicate">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <typeparam name="TSource">To be added.</typeparam>
            <typeparam name="TKey">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="keySelector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})">
            <typeparam name="TSource">To be added.</typeparam>
            <typeparam name="TKey">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="keySelector">To be added.</param>
            <param name="comparer">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}})">
            <typeparam name="TSource">To be added.</typeparam>
            <typeparam name="TKey">To be added.</typeparam>
            <typeparam name="TElement">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="keySelector">To be added.</param>
            <param name="elementSelector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Collections.Generic.IEqualityComparer{``1})">
            <typeparam name="TSource">To be added.</typeparam>
            <typeparam name="TKey">To be added.</typeparam>
            <typeparam name="TElement">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="keySelector">To be added.</param>
            <param name="elementSelector">To be added.</param>
            <param name="comparer">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})">
            <typeparam name="TSource">To be added.</typeparam>
            <typeparam name="TKey">To be added.</typeparam>
            <typeparam name="TResult">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="keySelector">To be added.</param>
            <param name="resultSelector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})">
            <typeparam name="TSource">To be added.</typeparam>
            <typeparam name="TKey">To be added.</typeparam>
            <typeparam name="TResult">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="keySelector">To be added.</param>
            <param name="resultSelector">To be added.</param>
            <param name="comparer">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}})">
            <typeparam name="TSource">To be added.</typeparam>
            <typeparam name="TKey">To be added.</typeparam>
            <typeparam name="TElement">To be added.</typeparam>
            <typeparam name="TResult">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="keySelector">To be added.</param>
            <param name="elementSelector">To be added.</param>
            <param name="resultSelector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}},System.Collections.Generic.IEqualityComparer{``1})">
            <typeparam name="TSource">To be added.</typeparam>
            <typeparam name="TKey">To be added.</typeparam>
            <typeparam name="TElement">To be added.</typeparam>
            <typeparam name="TResult">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="keySelector">To be added.</param>
            <param name="elementSelector">To be added.</param>
            <param name="resultSelector">To be added.</param>
            <param name="comparer">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})">
            <typeparam name="TOuter">To be added.</typeparam>
            <typeparam name="TInner">To be added.</typeparam>
            <typeparam name="TKey">To be added.</typeparam>
            <typeparam name="TResult">To be added.</typeparam>
            <param name="outer">To be added.</param>
            <param name="inner">To be added.</param>
            <param name="outerKeySelector">To be added.</param>
            <param name="innerKeySelector">To be added.</param>
            <param name="resultSelector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})">
            <typeparam name="TOuter">To be added.</typeparam>
            <typeparam name="TInner">To be added.</typeparam>
            <typeparam name="TKey">To be added.</typeparam>
            <typeparam name="TResult">To be added.</typeparam>
            <param name="outer">To be added.</param>
            <param name="inner">To be added.</param>
            <param name="outerKeySelector">To be added.</param>
            <param name="innerKeySelector">To be added.</param>
            <param name="resultSelector">To be added.</param>
            <param name="comparer">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source1">To be added.</param>
            <param name="source2">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source1">To be added.</param>
            <param name="source2">To be added.</param>
            <param name="comparer">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})">
            <typeparam name="TOuter">To be added.</typeparam>
            <typeparam name="TInner">To be added.</typeparam>
            <typeparam name="TKey">To be added.</typeparam>
            <typeparam name="TResult">To be added.</typeparam>
            <param name="outer">To be added.</param>
            <param name="inner">To be added.</param>
            <param name="outerKeySelector">To be added.</param>
            <param name="innerKeySelector">To be added.</param>
            <param name="resultSelector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})">
            <typeparam name="TOuter">To be added.</typeparam>
            <typeparam name="TInner">To be added.</typeparam>
            <typeparam name="TKey">To be added.</typeparam>
            <typeparam name="TResult">To be added.</typeparam>
            <param name="outer">To be added.</param>
            <param name="inner">To be added.</param>
            <param name="outerKeySelector">To be added.</param>
            <param name="innerKeySelector">To be added.</param>
            <param name="resultSelector">To be added.</param>
            <param name="comparer">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="predicate">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="predicate">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="predicate">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Queryable.Max``1(System.Linq.IQueryable{``0})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Queryable.Max``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <typeparam name="TSource">To be added.</typeparam>
            <typeparam name="TResult">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="selector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Queryable.Min``1(System.Linq.IQueryable{``0})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Queryable.Min``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <typeparam name="TSource">To be added.</typeparam>
            <typeparam name="TResult">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="selector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Queryable.OfType``1(System.Linq.IQueryable)">
            <typeparam name="TResult">To be added.</typeparam>
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <typeparam name="TSource">To be added.</typeparam>
            <typeparam name="TKey">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="keySelector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
            <typeparam name="TSource">To be added.</typeparam>
            <typeparam name="TKey">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="keySelector">To be added.</param>
            <param name="comparer">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <typeparam name="TSource">To be added.</typeparam>
            <typeparam name="TKey">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="keySelector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
            <typeparam name="TSource">To be added.</typeparam>
            <typeparam name="TKey">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="keySelector">To be added.</param>
            <param name="comparer">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Queryable.Reverse``1(System.Linq.IQueryable{``0})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,``1}})">
            <typeparam name="TSource">To be added.</typeparam>
            <typeparam name="TResult">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="selector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <typeparam name="TSource">To be added.</typeparam>
            <typeparam name="TResult">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="selector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})">
            <typeparam name="TSource">To be added.</typeparam>
            <typeparam name="TResult">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="selector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}})">
            <typeparam name="TSource">To be added.</typeparam>
            <typeparam name="TResult">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="selector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
            <typeparam name="TSource">To be added.</typeparam>
            <typeparam name="TCollection">To be added.</typeparam>
            <typeparam name="TResult">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="collectionSelector">To be added.</param>
            <param name="resultSelector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
            <typeparam name="TSource">To be added.</typeparam>
            <typeparam name="TCollection">To be added.</typeparam>
            <typeparam name="TResult">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="collectionSelector">To be added.</param>
            <param name="resultSelector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source1">To be added.</param>
            <param name="source2">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source1">To be added.</param>
            <param name="source2">To be added.</param>
            <param name="comparer">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="predicate">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="predicate">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Queryable.Skip``1(System.Linq.IQueryable{``0},System.Int32)">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="count">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="predicate">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="predicate">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Decimal})">
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Double})">
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Int32})">
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Int64})">
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Decimal}})">
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Double}})">
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Int32}})">
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Int64}})">
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Single}})">
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Single})">
            <param name="source">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="selector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="selector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="selector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="selector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="selector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="selector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="selector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="selector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="selector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="selector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Queryable.Take``1(System.Linq.IQueryable{``0},System.Int32)">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="count">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="predicate">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="predicate">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <typeparam name="TSource">To be added.</typeparam>
            <typeparam name="TKey">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="keySelector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
            <typeparam name="TSource">To be added.</typeparam>
            <typeparam name="TKey">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="keySelector">To be added.</param>
            <param name="comparer">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <typeparam name="TSource">To be added.</typeparam>
            <typeparam name="TKey">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="keySelector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
            <typeparam name="TSource">To be added.</typeparam>
            <typeparam name="TKey">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="keySelector">To be added.</param>
            <param name="comparer">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source1">To be added.</param>
            <param name="source2">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source1">To be added.</param>
            <param name="source2">To be added.</param>
            <param name="comparer">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="predicate">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
            <typeparam name="TSource">To be added.</typeparam>
            <param name="source">To be added.</param>
            <param name="predicate">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Queryable.Zip``3(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
            <typeparam name="TFirst">To be added.</typeparam>
            <typeparam name="TSecond">To be added.</typeparam>
            <typeparam name="TResult">To be added.</typeparam>
            <param name="source1">To be added.</param>
            <param name="source2">To be added.</param>
            <param name="resultSelector">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.Linq.Expressions.BinaryExpression">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.BinaryExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
            <param name="visitor">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.BinaryExpression.CanReduce">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.BinaryExpression.Conversion">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.BinaryExpression.IsLifted">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.BinaryExpression.Left">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.BinaryExpression.Method">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.BinaryExpression.Reduce">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.BinaryExpression.Right">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.BinaryExpression.Update(System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.Expression)">
            <param name="left">To be added.</param>
            <param name="conversion">To be added.</param>
            <param name="right">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.Linq.Expressions.BlockExpression">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.BlockExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
            <param name="visitor">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.BlockExpression.Expressions">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.BlockExpression.NodeType">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.BlockExpression.Result">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.BlockExpression.Type">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.BlockExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <param name="variables">To be added.</param>
            <param name="expressions">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.BlockExpression.Variables">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.Linq.Expressions.CatchBlock">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.CatchBlock.Body">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.CatchBlock.Filter">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.CatchBlock.Test">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.CatchBlock.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.CatchBlock.Update(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <param name="variable">To be added.</param>
            <param name="filter">To be added.</param>
            <param name="body">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.CatchBlock.Variable">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.Linq.Expressions.ConditionalExpression">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.ConditionalExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
            <param name="visitor">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.ConditionalExpression.IfFalse">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.ConditionalExpression.IfTrue">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.ConditionalExpression.NodeType">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.ConditionalExpression.Test">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.ConditionalExpression.Type">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.ConditionalExpression.Update(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <param name="test">To be added.</param>
            <param name="ifTrue">To be added.</param>
            <param name="ifFalse">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.Linq.Expressions.ConstantExpression">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.ConstantExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
            <param name="visitor">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.ConstantExpression.NodeType">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.ConstantExpression.Type">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.ConstantExpression.Value">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.Linq.Expressions.DebugInfoExpression">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.DebugInfoExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
            <param name="visitor">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.DebugInfoExpression.Document">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.DebugInfoExpression.EndColumn">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.DebugInfoExpression.EndLine">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.DebugInfoExpression.IsClear">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.DebugInfoExpression.NodeType">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.DebugInfoExpression.StartColumn">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.DebugInfoExpression.StartLine">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.DebugInfoExpression.Type">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.Linq.Expressions.DefaultExpression">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.DefaultExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
            <param name="visitor">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.DefaultExpression.NodeType">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.DefaultExpression.Type">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.Linq.Expressions.DynamicExpression">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.DynamicExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
            <param name="visitor">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.DynamicExpression.Arguments">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.DynamicExpression.Binder">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.DynamicExpression.DelegateType">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <param name="binder">To be added.</param>
            <param name="returnType">To be added.</param>
            <param name="arguments">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression)">
            <param name="binder">To be added.</param>
            <param name="returnType">To be added.</param>
            <param name="arg0">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression[])">
            <param name="binder">To be added.</param>
            <param name="returnType">To be added.</param>
            <param name="arguments">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <param name="binder">To be added.</param>
            <param name="returnType">To be added.</param>
            <param name="arg0">To be added.</param>
            <param name="arg1">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <param name="binder">To be added.</param>
            <param name="returnType">To be added.</param>
            <param name="arg0">To be added.</param>
            <param name="arg1">To be added.</param>
            <param name="arg2">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <param name="binder">To be added.</param>
            <param name="returnType">To be added.</param>
            <param name="arg0">To be added.</param>
            <param name="arg1">To be added.</param>
            <param name="arg2">To be added.</param>
            <param name="arg3">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <param name="delegateType">To be added.</param>
            <param name="binder">To be added.</param>
            <param name="arguments">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression)">
            <param name="delegateType">To be added.</param>
            <param name="binder">To be added.</param>
            <param name="arg0">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression[])">
            <param name="delegateType">To be added.</param>
            <param name="binder">To be added.</param>
            <param name="arguments">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <param name="delegateType">To be added.</param>
            <param name="binder">To be added.</param>
            <param name="arg0">To be added.</param>
            <param name="arg1">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <param name="delegateType">To be added.</param>
            <param name="binder">To be added.</param>
            <param name="arg0">To be added.</param>
            <param name="arg1">To be added.</param>
            <param name="arg2">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <param name="delegateType">To be added.</param>
            <param name="binder">To be added.</param>
            <param name="arg0">To be added.</param>
            <param name="arg1">To be added.</param>
            <param name="arg2">To be added.</param>
            <param name="arg3">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.DynamicExpression.NodeType">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.DynamicExpression.System#Linq#Expressions#IArgumentProvider#ArgumentCount">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.DynamicExpression.System#Linq#Expressions#IArgumentProvider#GetArgument(System.Int32)">
            <param name="index">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.DynamicExpression.System#Linq#Expressions#IDynamicExpression#CreateCallSite">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.DynamicExpression.System#Linq#Expressions#IDynamicExpression#Rewrite(System.Linq.Expressions.Expression[])">
            <param name="args">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.DynamicExpression.Type">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.DynamicExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <param name="arguments">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.Linq.Expressions.DynamicExpressionVisitor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:System.Linq.Expressions.DynamicExpressionVisitor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.DynamicExpressionVisitor.VisitDynamic(System.Linq.Expressions.DynamicExpression)">
            <param name="node">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.Linq.Expressions.ElementInit">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.ElementInit.AddMethod">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.ElementInit.Arguments">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.ElementInit.System#Linq#Expressions#IArgumentProvider#ArgumentCount">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.ElementInit.System#Linq#Expressions#IArgumentProvider#GetArgument(System.Int32)">
            <param name="index">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.ElementInit.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.ElementInit.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <param name="arguments">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.Linq.Expressions.Expression">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:System.Linq.Expressions.Expression">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:System.Linq.Expressions.Expression(System.Linq.Expressions.ExpressionType,System.Type)">
            <param name="nodeType">To be added.</param>
            <param name="type">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Accept(System.Linq.Expressions.ExpressionVisitor)">
            <param name="visitor">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <param name="left">To be added.</param>
            <param name="right">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
            <param name="left">To be added.</param>
            <param name="right">To be added.</param>
            <param name="method">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <param name="left">To be added.</param>
            <param name="right">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
            <param name="left">To be added.</param>
            <param name="right">To be added.</param>
            <param name="method">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
            <param name="left">To be added.</param>
            <param name="right">To be added.</param>
            <param name="method">To be added.</param>
            <param name="conversion">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <param name="left">To be added.</param>
            <param name="right">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
            <param name="left">To be added.</param>
            <param name="right">To be added.</param>
            <param name="method">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
            <param name="left">To be added.</param>
            <param name="right">To be added.</param>
            <param name="method">To be added.</param>
            <param name="conversion">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <param name="left">To be added.</param>
            <param name="right">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
            <param name="left">To be added.</param>
            <param name="right">To be added.</param>
            <param name="method">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <param name="left">To be added.</param>
            <param name="right">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
            <param name="left">To be added.</param>
            <param name="right">To be added.</param>
            <param name="method">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <param name="left">To be added.</param>
            <param name="right">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
            <param name="left">To be added.</param>
            <param name="right">To be added.</param>
            <param name="method">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <param name="left">To be added.</param>
            <param name="right">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
            <param name="left">To be added.</param>
            <param name="right">To be added.</param>
            <param name="method">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
            <param name="left">To be added.</param>
            <param name="right">To be added.</param>
            <param name="method">To be added.</param>
            <param name="conversion">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <param name="array">To be added.</param>
            <param name="indexes">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
            <param name="array">To be added.</param>
            <param name="indexes">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <param name="array">To be added.</param>
            <param name="indexes">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <param name="array">To be added.</param>
            <param name="index">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
            <param name="array">To be added.</param>
            <param name="indexes">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.ArrayLength(System.Linq.Expressions.Expression)">
            <param name="array">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Assign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <param name="left">To be added.</param>
            <param name="right">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Bind(System.Reflection.MemberInfo,System.Linq.Expressions.Expression)">
            <param name="member">To be added.</param>
            <param name="expression">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Bind(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)">
            <param name="propertyAccessor">To be added.</param>
            <param name="expression">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <param name="expressions">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression[])">
            <param name="expressions">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <param name="variables">To be added.</param>
            <param name="expressions">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])">
            <param name="variables">To be added.</param>
            <param name="expressions">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <param name="arg0">To be added.</param>
            <param name="arg1">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <param name="type">To be added.</param>
            <param name="expressions">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Block(System.Type,System.Linq.Expressions.Expression[])">
            <param name="type">To be added.</param>
            <param name="expressions">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <param name="arg0">To be added.</param>
            <param name="arg1">To be added.</param>
            <param name="arg2">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <param name="type">To be added.</param>
            <param name="variables">To be added.</param>
            <param name="expressions">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])">
            <param name="type">To be added.</param>
            <param name="variables">To be added.</param>
            <param name="expressions">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <param name="arg0">To be added.</param>
            <param name="arg1">To be added.</param>
            <param name="arg2">To be added.</param>
            <param name="arg3">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <param name="arg0">To be added.</param>
            <param name="arg1">To be added.</param>
            <param name="arg2">To be added.</param>
            <param name="arg3">To be added.</param>
            <param name="arg4">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget)">
            <param name="target">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
            <param name="target">To be added.</param>
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Type)">
            <param name="target">To be added.</param>
            <param name="type">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)">
            <param name="target">To be added.</param>
            <param name="value">To be added.</param>
            <param name="type">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
            <param name="instance">To be added.</param>
            <param name="method">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <param name="method">To be added.</param>
            <param name="arguments">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)">
            <param name="method">To be added.</param>
            <param name="arg0">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
            <param name="method">To be added.</param>
            <param name="arguments">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <param name="instance">To be added.</param>
            <param name="method">To be added.</param>
            <param name="arguments">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
            <param name="instance">To be added.</param>
            <param name="method">To be added.</param>
            <param name="arguments">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <param name="method">To be added.</param>
            <param name="arg0">To be added.</param>
            <param name="arg1">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <param name="instance">To be added.</param>
            <param name="method">To be added.</param>
            <param name="arg0">To be added.</param>
            <param name="arg1">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.String,System.Type[],System.Linq.Expressions.Expression[])">
            <param name="instance">To be added.</param>
            <param name="methodName">To be added.</param>
            <param name="typeArguments">To be added.</param>
            <param name="arguments">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <param name="method">To be added.</param>
            <param name="arg0">To be added.</param>
            <param name="arg1">To be added.</param>
            <param name="arg2">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Call(System.Type,System.String,System.Type[],System.Linq.Expressions.Expression[])">
            <param name="type">To be added.</param>
            <param name="methodName">To be added.</param>
            <param name="typeArguments">To be added.</param>
            <param name="arguments">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <param name="instance">To be added.</param>
            <param name="method">To be added.</param>
            <param name="arg0">To be added.</param>
            <param name="arg1">To be added.</param>
            <param name="arg2">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <param name="method">To be added.</param>
            <param name="arg0">To be added.</param>
            <param name="arg1">To be added.</param>
            <param name="arg2">To be added.</param>
            <param name="arg3">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <param name="method">To be added.</param>
            <param name="arg0">To be added.</param>
            <param name="arg1">To be added.</param>
            <param name="arg2">To be added.</param>
            <param name="arg3">To be added.</param>
            <param name="arg4">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.Expression.CanReduce">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression)">
            <param name="variable">To be added.</param>
            <param name="body">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression)">
            <param name="type">To be added.</param>
            <param name="body">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <param name="variable">To be added.</param>
            <param name="body">To be added.</param>
            <param name="filter">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <param name="type">To be added.</param>
            <param name="body">To be added.</param>
            <param name="filter">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.ClearDebugInfo(System.Linq.Expressions.SymbolDocumentInfo)">
            <param name="document">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <param name="left">To be added.</param>
            <param name="right">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression)">
            <param name="left">To be added.</param>
            <param name="right">To be added.</param>
            <param name="conversion">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <param name="test">To be added.</param>
            <param name="ifTrue">To be added.</param>
            <param name="ifFalse">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Type)">
            <param name="test">To be added.</param>
            <param name="ifTrue">To be added.</param>
            <param name="ifFalse">To be added.</param>
            <param name="type">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Constant(System.Object)">
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Constant(System.Object,System.Type)">
            <param name="value">To be added.</param>
            <param name="type">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget)">
            <param name="target">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget,System.Type)">
            <param name="target">To be added.</param>
            <param name="type">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type)">
            <param name="expression">To be added.</param>
            <param name="type">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
            <param name="expression">To be added.</param>
            <param name="type">To be added.</param>
            <param name="method">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type)">
            <param name="expression">To be added.</param>
            <param name="type">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
            <param name="expression">To be added.</param>
            <param name="type">To be added.</param>
            <param name="method">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.DebugInfo(System.Linq.Expressions.SymbolDocumentInfo,System.Int32,System.Int32,System.Int32,System.Int32)">
            <param name="document">To be added.</param>
            <param name="startLine">To be added.</param>
            <param name="startColumn">To be added.</param>
            <param name="endLine">To be added.</param>
            <param name="endColumn">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression)">
            <param name="expression">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
            <param name="expression">To be added.</param>
            <param name="method">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Default(System.Type)">
            <param name="type">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <param name="left">To be added.</param>
            <param name="right">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
            <param name="left">To be added.</param>
            <param name="right">To be added.</param>
            <param name="method">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <param name="left">To be added.</param>
            <param name="right">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
            <param name="left">To be added.</param>
            <param name="right">To be added.</param>
            <param name="method">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
            <param name="left">To be added.</param>
            <param name="right">To be added.</param>
            <param name="method">To be added.</param>
            <param name="conversion">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <param name="binder">To be added.</param>
            <param name="returnType">To be added.</param>
            <param name="arguments">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression)">
            <param name="binder">To be added.</param>
            <param name="returnType">To be added.</param>
            <param name="arg0">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression[])">
            <param name="binder">To be added.</param>
            <param name="returnType">To be added.</param>
            <param name="arguments">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <param name="binder">To be added.</param>
            <param name="returnType">To be added.</param>
            <param name="arg0">To be added.</param>
            <param name="arg1">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <param name="binder">To be added.</param>
            <param name="returnType">To be added.</param>
            <param name="arg0">To be added.</param>
            <param name="arg1">To be added.</param>
            <param name="arg2">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <param name="binder">To be added.</param>
            <param name="returnType">To be added.</param>
            <param name="arg0">To be added.</param>
            <param name="arg1">To be added.</param>
            <param name="arg2">To be added.</param>
            <param name="arg3">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <param name="addMethod">To be added.</param>
            <param name="arguments">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
            <param name="addMethod">To be added.</param>
            <param name="arguments">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Empty">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <param name="left">To be added.</param>
            <param name="right">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
            <param name="left">To be added.</param>
            <param name="right">To be added.</param>
            <param name="liftToNull">To be added.</param>
            <param name="method">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <param name="left">To be added.</param>
            <param name="right">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
            <param name="left">To be added.</param>
            <param name="right">To be added.</param>
            <param name="method">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <param name="left">To be added.</param>
            <param name="right">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
            <param name="left">To be added.</param>
            <param name="right">To be added.</param>
            <param name="method">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
            <param name="left">To be added.</param>
            <param name="right">To be added.</param>
            <param name="method">To be added.</param>
            <param name="conversion">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Reflection.FieldInfo)">
            <param name="expression">To be added.</param>
            <param name="field">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.String)">
            <param name="expression">To be added.</param>
            <param name="fieldName">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Type,System.String)">
            <param name="expression">To be added.</param>
            <param name="type">To be added.</param>
            <param name="fieldName">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.GetActionType(System.Type[])">
            <param name="typeArgs">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.GetDelegateType(System.Type[])">
            <param name="typeArgs">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.GetFuncType(System.Type[])">
            <param name="typeArgs">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget)">
            <param name="target">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
            <param name="target">To be added.</param>
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Type)">
            <param name="target">To be added.</param>
            <param name="type">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)">
            <param name="target">To be added.</param>
            <param name="value">To be added.</param>
            <param name="type">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <param name="left">To be added.</param>
            <param name="right">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
            <param name="left">To be added.</param>
            <param name="right">To be added.</param>
            <param name="liftToNull">To be added.</param>
            <param name="method">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <param name="left">To be added.</param>
            <param name="right">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
            <param name="left">To be added.</param>
            <param name="right">To be added.</param>
            <param name="liftToNull">To be added.</param>
            <param name="method">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.IfThen(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <param name="test">To be added.</param>
            <param name="ifTrue">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.IfThenElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <param name="test">To be added.</param>
            <param name="ifTrue">To be added.</param>
            <param name="ifFalse">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression)">
            <param name="expression">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
            <param name="expression">To be added.</param>
            <param name="method">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <param name="expression">To be added.</param>
            <param name="arguments">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
            <param name="expression">To be added.</param>
            <param name="arguments">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression)">
            <param name="expression">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
            <param name="expression">To be added.</param>
            <param name="method">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression)">
            <param name="expression">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
            <param name="expression">To be added.</param>
            <param name="method">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Label">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget)">
            <param name="target">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Label(System.String)">
            <param name="name">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Label(System.Type)">
            <param name="type">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
            <param name="target">To be added.</param>
            <param name="defaultValue">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Label(System.Type,System.String)">
            <param name="type">To be added.</param>
            <param name="name">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
            <param name="body">To be added.</param>
            <param name="parameters">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
            <param name="body">To be added.</param>
            <param name="parameters">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
            <param name="body">To be added.</param>
            <param name="tailCall">To be added.</param>
            <param name="parameters">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])">
            <param name="body">To be added.</param>
            <param name="tailCall">To be added.</param>
            <param name="parameters">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
            <param name="body">To be added.</param>
            <param name="name">To be added.</param>
            <param name="parameters">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
            <param name="delegateType">To be added.</param>
            <param name="body">To be added.</param>
            <param name="parameters">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
            <param name="delegateType">To be added.</param>
            <param name="body">To be added.</param>
            <param name="parameters">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
            <param name="body">To be added.</param>
            <param name="name">To be added.</param>
            <param name="tailCall">To be added.</param>
            <param name="parameters">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
            <param name="delegateType">To be added.</param>
            <param name="body">To be added.</param>
            <param name="tailCall">To be added.</param>
            <param name="parameters">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])">
            <param name="delegateType">To be added.</param>
            <param name="body">To be added.</param>
            <param name="tailCall">To be added.</param>
            <param name="parameters">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
            <param name="delegateType">To be added.</param>
            <param name="body">To be added.</param>
            <param name="name">To be added.</param>
            <param name="parameters">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
            <param name="delegateType">To be added.</param>
            <param name="body">To be added.</param>
            <param name="name">To be added.</param>
            <param name="tailCall">To be added.</param>
            <param name="parameters">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
            <typeparam name="TDelegate">To be added.</typeparam>
            <param name="body">To be added.</param>
            <param name="parameters">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
            <typeparam name="TDelegate">To be added.</typeparam>
            <param name="body">To be added.</param>
            <param name="parameters">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
            <typeparam name="TDelegate">To be added.</typeparam>
            <param name="body">To be added.</param>
            <param name="tailCall">To be added.</param>
            <param name="parameters">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])">
            <typeparam name="TDelegate">To be added.</typeparam>
            <param name="body">To be added.</param>
            <param name="tailCall">To be added.</param>
            <param name="parameters">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
            <typeparam name="TDelegate">To be added.</typeparam>
            <param name="body">To be added.</param>
            <param name="name">To be added.</param>
            <param name="parameters">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
            <typeparam name="TDelegate">To be added.</typeparam>
            <param name="body">To be added.</param>
            <param name="name">To be added.</param>
            <param name="tailCall">To be added.</param>
            <param name="parameters">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <param name="left">To be added.</param>
            <param name="right">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
            <param name="left">To be added.</param>
            <param name="right">To be added.</param>
            <param name="method">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <param name="left">To be added.</param>
            <param name="right">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
            <param name="left">To be added.</param>
            <param name="right">To be added.</param>
            <param name="method">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
            <param name="left">To be added.</param>
            <param name="right">To be added.</param>
            <param name="method">To be added.</param>
            <param name="conversion">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <param name="left">To be added.</param>
            <param name="right">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
            <param name="left">To be added.</param>
            <param name="right">To be added.</param>
            <param name="liftToNull">To be added.</param>
            <param name="method">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <param name="left">To be added.</param>
            <param name="right">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
            <param name="left">To be added.</param>
            <param name="right">To be added.</param>
            <param name="liftToNull">To be added.</param>
            <param name="method">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
            <param name="member">To be added.</param>
            <param name="initializers">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Linq.Expressions.ElementInit[])">
            <param name="member">To be added.</param>
            <param name="initializers">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
            <param name="propertyAccessor">To be added.</param>
            <param name="initializers">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Linq.Expressions.ElementInit[])">
            <param name="propertyAccessor">To be added.</param>
            <param name="initializers">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
            <param name="newExpression">To be added.</param>
            <param name="initializers">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <param name="newExpression">To be added.</param>
            <param name="initializers">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.ElementInit[])">
            <param name="newExpression">To be added.</param>
            <param name="initializers">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.Expression[])">
            <param name="newExpression">To be added.</param>
            <param name="initializers">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <param name="newExpression">To be added.</param>
            <param name="addMethod">To be added.</param>
            <param name="initializers">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
            <param name="newExpression">To be added.</param>
            <param name="addMethod">To be added.</param>
            <param name="initializers">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression)">
            <param name="body">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget)">
            <param name="body">To be added.</param>
            <param name="break">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.LabelTarget)">
            <param name="body">To be added.</param>
            <param name="break">To be added.</param>
            <param name="continue">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <param name="binaryType">To be added.</param>
            <param name="left">To be added.</param>
            <param name="right">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
            <param name="binaryType">To be added.</param>
            <param name="left">To be added.</param>
            <param name="right">To be added.</param>
            <param name="liftToNull">To be added.</param>
            <param name="method">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
            <param name="binaryType">To be added.</param>
            <param name="left">To be added.</param>
            <param name="right">To be added.</param>
            <param name="liftToNull">To be added.</param>
            <param name="method">To be added.</param>
            <param name="conversion">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.MakeCatchBlock(System.Type,System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <param name="type">To be added.</param>
            <param name="variable">To be added.</param>
            <param name="body">To be added.</param>
            <param name="filter">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <param name="delegateType">To be added.</param>
            <param name="binder">To be added.</param>
            <param name="arguments">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression)">
            <param name="delegateType">To be added.</param>
            <param name="binder">To be added.</param>
            <param name="arg0">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression[])">
            <param name="delegateType">To be added.</param>
            <param name="binder">To be added.</param>
            <param name="arguments">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <param name="delegateType">To be added.</param>
            <param name="binder">To be added.</param>
            <param name="arg0">To be added.</param>
            <param name="arg1">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <param name="delegateType">To be added.</param>
            <param name="binder">To be added.</param>
            <param name="arg0">To be added.</param>
            <param name="arg1">To be added.</param>
            <param name="arg2">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <param name="delegateType">To be added.</param>
            <param name="binder">To be added.</param>
            <param name="arg0">To be added.</param>
            <param name="arg1">To be added.</param>
            <param name="arg2">To be added.</param>
            <param name="arg3">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.MakeGoto(System.Linq.Expressions.GotoExpressionKind,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)">
            <param name="kind">To be added.</param>
            <param name="target">To be added.</param>
            <param name="value">To be added.</param>
            <param name="type">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.MakeIndex(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <param name="instance">To be added.</param>
            <param name="indexer">To be added.</param>
            <param name="arguments">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.MakeMemberAccess(System.Linq.Expressions.Expression,System.Reflection.MemberInfo)">
            <param name="expression">To be added.</param>
            <param name="member">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.MakeTry(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock})">
            <param name="type">To be added.</param>
            <param name="body">To be added.</param>
            <param name="finally">To be added.</param>
            <param name="fault">To be added.</param>
            <param name="handlers">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type)">
            <param name="unaryType">To be added.</param>
            <param name="operand">To be added.</param>
            <param name="type">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
            <param name="unaryType">To be added.</param>
            <param name="operand">To be added.</param>
            <param name="type">To be added.</param>
            <param name="method">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
            <param name="member">To be added.</param>
            <param name="bindings">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Linq.Expressions.MemberBinding[])">
            <param name="member">To be added.</param>
            <param name="bindings">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
            <param name="propertyAccessor">To be added.</param>
            <param name="bindings">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Linq.Expressions.MemberBinding[])">
            <param name="propertyAccessor">To be added.</param>
            <param name="bindings">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
            <param name="newExpression">To be added.</param>
            <param name="bindings">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.MemberBinding[])">
            <param name="newExpression">To be added.</param>
            <param name="bindings">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <param name="left">To be added.</param>
            <param name="right">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
            <param name="left">To be added.</param>
            <param name="right">To be added.</param>
            <param name="method">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <param name="left">To be added.</param>
            <param name="right">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
            <param name="left">To be added.</param>
            <param name="right">To be added.</param>
            <param name="method">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
            <param name="left">To be added.</param>
            <param name="right">To be added.</param>
            <param name="method">To be added.</param>
            <param name="conversion">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <param name="left">To be added.</param>
            <param name="right">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
            <param name="left">To be added.</param>
            <param name="right">To be added.</param>
            <param name="method">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <param name="left">To be added.</param>
            <param name="right">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
            <param name="left">To be added.</param>
            <param name="right">To be added.</param>
            <param name="method">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
            <param name="left">To be added.</param>
            <param name="right">To be added.</param>
            <param name="method">To be added.</param>
            <param name="conversion">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <param name="left">To be added.</param>
            <param name="right">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
            <param name="left">To be added.</param>
            <param name="right">To be added.</param>
            <param name="method">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
            <param name="left">To be added.</param>
            <param name="right">To be added.</param>
            <param name="method">To be added.</param>
            <param name="conversion">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <param name="left">To be added.</param>
            <param name="right">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
            <param name="left">To be added.</param>
            <param name="right">To be added.</param>
            <param name="method">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression)">
            <param name="expression">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
            <param name="expression">To be added.</param>
            <param name="method">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression)">
            <param name="expression">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
            <param name="expression">To be added.</param>
            <param name="method">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo)">
            <param name="constructor">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.New(System.Type)">
            <param name="type">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <param name="constructor">To be added.</param>
            <param name="arguments">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Linq.Expressions.Expression[])">
            <param name="constructor">To be added.</param>
            <param name="arguments">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo})">
            <param name="constructor">To be added.</param>
            <param name="arguments">To be added.</param>
            <param name="members">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Reflection.MemberInfo[])">
            <param name="constructor">To be added.</param>
            <param name="arguments">To be added.</param>
            <param name="members">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <param name="type">To be added.</param>
            <param name="bounds">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Linq.Expressions.Expression[])">
            <param name="type">To be added.</param>
            <param name="bounds">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <param name="type">To be added.</param>
            <param name="initializers">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Linq.Expressions.Expression[])">
            <param name="type">To be added.</param>
            <param name="initializers">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.Expression.NodeType">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression)">
            <param name="expression">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
            <param name="expression">To be added.</param>
            <param name="method">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <param name="left">To be added.</param>
            <param name="right">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
            <param name="left">To be added.</param>
            <param name="right">To be added.</param>
            <param name="liftToNull">To be added.</param>
            <param name="method">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression)">
            <param name="expression">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
            <param name="expression">To be added.</param>
            <param name="method">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <param name="left">To be added.</param>
            <param name="right">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
            <param name="left">To be added.</param>
            <param name="right">To be added.</param>
            <param name="method">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <param name="left">To be added.</param>
            <param name="right">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
            <param name="left">To be added.</param>
            <param name="right">To be added.</param>
            <param name="method">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
            <param name="left">To be added.</param>
            <param name="right">To be added.</param>
            <param name="method">To be added.</param>
            <param name="conversion">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <param name="left">To be added.</param>
            <param name="right">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
            <param name="left">To be added.</param>
            <param name="right">To be added.</param>
            <param name="method">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Parameter(System.Type)">
            <param name="type">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Parameter(System.Type,System.String)">
            <param name="type">To be added.</param>
            <param name="name">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression)">
            <param name="expression">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
            <param name="expression">To be added.</param>
            <param name="method">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression)">
            <param name="expression">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
            <param name="expression">To be added.</param>
            <param name="method">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <param name="left">To be added.</param>
            <param name="right">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
            <param name="left">To be added.</param>
            <param name="right">To be added.</param>
            <param name="method">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <param name="left">To be added.</param>
            <param name="right">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
            <param name="left">To be added.</param>
            <param name="right">To be added.</param>
            <param name="method">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
            <param name="left">To be added.</param>
            <param name="right">To be added.</param>
            <param name="method">To be added.</param>
            <param name="conversion">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression)">
            <param name="expression">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
            <param name="expression">To be added.</param>
            <param name="method">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression)">
            <param name="expression">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
            <param name="expression">To be added.</param>
            <param name="method">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
            <param name="expression">To be added.</param>
            <param name="propertyAccessor">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo)">
            <param name="expression">To be added.</param>
            <param name="property">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String)">
            <param name="expression">To be added.</param>
            <param name="propertyName">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <param name="instance">To be added.</param>
            <param name="indexer">To be added.</param>
            <param name="arguments">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Linq.Expressions.Expression[])">
            <param name="instance">To be added.</param>
            <param name="indexer">To be added.</param>
            <param name="arguments">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String,System.Linq.Expressions.Expression[])">
            <param name="instance">To be added.</param>
            <param name="propertyName">To be added.</param>
            <param name="arguments">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Type,System.String)">
            <param name="expression">To be added.</param>
            <param name="type">To be added.</param>
            <param name="propertyName">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.PropertyOrField(System.Linq.Expressions.Expression,System.String)">
            <param name="expression">To be added.</param>
            <param name="propertyOrFieldName">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Quote(System.Linq.Expressions.Expression)">
            <param name="expression">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Reduce">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.ReduceAndCheck">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.ReduceExtensions">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.ReferenceEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <param name="left">To be added.</param>
            <param name="right">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.ReferenceNotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <param name="left">To be added.</param>
            <param name="right">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Rethrow">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Rethrow(System.Type)">
            <param name="type">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget)">
            <param name="target">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
            <param name="target">To be added.</param>
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Type)">
            <param name="target">To be added.</param>
            <param name="type">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)">
            <param name="target">To be added.</param>
            <param name="value">To be added.</param>
            <param name="type">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <param name="left">To be added.</param>
            <param name="right">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
            <param name="left">To be added.</param>
            <param name="right">To be added.</param>
            <param name="method">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <param name="left">To be added.</param>
            <param name="right">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
            <param name="left">To be added.</param>
            <param name="right">To be added.</param>
            <param name="method">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
            <param name="left">To be added.</param>
            <param name="right">To be added.</param>
            <param name="method">To be added.</param>
            <param name="conversion">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.RuntimeVariables(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
            <param name="variables">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.RuntimeVariables(System.Linq.Expressions.ParameterExpression[])">
            <param name="variables">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <param name="left">To be added.</param>
            <param name="right">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
            <param name="left">To be added.</param>
            <param name="right">To be added.</param>
            <param name="method">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <param name="left">To be added.</param>
            <param name="right">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
            <param name="left">To be added.</param>
            <param name="right">To be added.</param>
            <param name="method">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
            <param name="left">To be added.</param>
            <param name="right">To be added.</param>
            <param name="method">To be added.</param>
            <param name="conversion">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <param name="left">To be added.</param>
            <param name="right">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
            <param name="left">To be added.</param>
            <param name="right">To be added.</param>
            <param name="method">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
            <param name="left">To be added.</param>
            <param name="right">To be added.</param>
            <param name="method">To be added.</param>
            <param name="conversion">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <param name="left">To be added.</param>
            <param name="right">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
            <param name="left">To be added.</param>
            <param name="right">To be added.</param>
            <param name="method">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])">
            <param name="switchValue">To be added.</param>
            <param name="cases">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])">
            <param name="switchValue">To be added.</param>
            <param name="defaultBody">To be added.</param>
            <param name="cases">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})">
            <param name="switchValue">To be added.</param>
            <param name="defaultBody">To be added.</param>
            <param name="comparison">To be added.</param>
            <param name="cases">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])">
            <param name="switchValue">To be added.</param>
            <param name="defaultBody">To be added.</param>
            <param name="comparison">To be added.</param>
            <param name="cases">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})">
            <param name="type">To be added.</param>
            <param name="switchValue">To be added.</param>
            <param name="defaultBody">To be added.</param>
            <param name="comparison">To be added.</param>
            <param name="cases">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])">
            <param name="type">To be added.</param>
            <param name="switchValue">To be added.</param>
            <param name="defaultBody">To be added.</param>
            <param name="comparison">To be added.</param>
            <param name="cases">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <param name="body">To be added.</param>
            <param name="testValues">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
            <param name="body">To be added.</param>
            <param name="testValues">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.SymbolDocument(System.String)">
            <param name="fileName">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid)">
            <param name="fileName">To be added.</param>
            <param name="language">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid)">
            <param name="fileName">To be added.</param>
            <param name="language">To be added.</param>
            <param name="languageVendor">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid,System.Guid)">
            <param name="fileName">To be added.</param>
            <param name="language">To be added.</param>
            <param name="languageVendor">To be added.</param>
            <param name="documentType">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression)">
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression,System.Type)">
            <param name="value">To be added.</param>
            <param name="type">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.TryCatch(System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])">
            <param name="body">To be added.</param>
            <param name="handlers">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.TryCatchFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])">
            <param name="body">To be added.</param>
            <param name="finally">To be added.</param>
            <param name="handlers">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.TryFault(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <param name="body">To be added.</param>
            <param name="fault">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.TryFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <param name="body">To be added.</param>
            <param name="finally">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.TryGetActionType(System.Type[],System.Type@)">
            <param name="typeArgs">To be added.</param>
            <param name="actionType">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.TryGetFuncType(System.Type[],System.Type@)">
            <param name="typeArgs">To be added.</param>
            <param name="funcType">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.Expression.Type">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.TypeAs(System.Linq.Expressions.Expression,System.Type)">
            <param name="expression">To be added.</param>
            <param name="type">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.TypeEqual(System.Linq.Expressions.Expression,System.Type)">
            <param name="expression">To be added.</param>
            <param name="type">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.TypeIs(System.Linq.Expressions.Expression,System.Type)">
            <param name="expression">To be added.</param>
            <param name="type">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression)">
            <param name="expression">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
            <param name="expression">To be added.</param>
            <param name="method">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Unbox(System.Linq.Expressions.Expression,System.Type)">
            <param name="expression">To be added.</param>
            <param name="type">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Variable(System.Type)">
            <param name="type">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.Variable(System.Type,System.String)">
            <param name="type">To be added.</param>
            <param name="name">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)">
            <param name="visitor">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.Linq.Expressions.Expression`1">
            <typeparam name="TDelegate">To be added.</typeparam>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression`1.Accept(`0System`0.`0Linq`0.`0Expressions`0.`0ExpressionVisitor`0)">
            <param name="visitor">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression`1.Compile">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression`1.Compile(`0System`0.`0Boolean`0)">
            <param name="preferInterpretation">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression`1.Compile(`0System`0.`0Runtime`0.`0CompilerServices`0.`0DebugInfoGenerator`0)">
            <param name="debugInfoGenerator">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.Expression`1.Update(`0System`0.`0Linq`0.`0Expressions`0.`0Expression`0,`0System`0.`0Collections`0.`0Generic`0.`0IEnumerable`0{`0System`0.`0Linq`0.`0Expressions`0.`0ParameterExpression`0})">
            <param name="body">To be added.</param>
            <param name="parameters">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.Linq.Expressions.ExpressionType">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:System.Linq.Expressions.ExpressionType.Add">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.Linq.Expressions.ExpressionType.AddAssign">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.Linq.Expressions.ExpressionType.AddAssignChecked">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.Linq.Expressions.ExpressionType.AddChecked">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.Linq.Expressions.ExpressionType.And">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.Linq.Expressions.ExpressionType.AndAlso">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.Linq.Expressions.ExpressionType.AndAssign">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.Linq.Expressions.ExpressionType.ArrayIndex">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.Linq.Expressions.ExpressionType.ArrayLength">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.Linq.Expressions.ExpressionType.Assign">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.Linq.Expressions.ExpressionType.Block">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.Linq.Expressions.ExpressionType.Call">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.Linq.Expressions.ExpressionType.Coalesce">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.Linq.Expressions.ExpressionType.Conditional">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.Linq.Expressions.ExpressionType.Constant">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.Linq.Expressions.ExpressionType.Convert">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.Linq.Expressions.ExpressionType.ConvertChecked">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.Linq.Expressions.ExpressionType.DebugInfo">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.Linq.Expressions.ExpressionType.Decrement">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.Linq.Expressions.ExpressionType.Default">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.Linq.Expressions.ExpressionType.Divide">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.Linq.Expressions.ExpressionType.DivideAssign">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.Linq.Expressions.ExpressionType.Dynamic">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.Linq.Expressions.ExpressionType.Equal">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.Linq.Expressions.ExpressionType.ExclusiveOr">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.Linq.Expressions.ExpressionType.Extension">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.Linq.Expressions.ExpressionType.Goto">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.Linq.Expressions.ExpressionType.GreaterThan">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.Linq.Expressions.ExpressionType.GreaterThanOrEqual">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.Linq.Expressions.ExpressionType.Increment">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.Linq.Expressions.ExpressionType.Index">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.Linq.Expressions.ExpressionType.Invoke">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.Linq.Expressions.ExpressionType.IsFalse">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.Linq.Expressions.ExpressionType.IsTrue">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.Linq.Expressions.ExpressionType.Label">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.Linq.Expressions.ExpressionType.Lambda">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.Linq.Expressions.ExpressionType.LeftShift">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.Linq.Expressions.ExpressionType.LessThan">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.Linq.Expressions.ExpressionType.LessThanOrEqual">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.Linq.Expressions.ExpressionType.ListInit">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.Linq.Expressions.ExpressionType.Loop">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.Linq.Expressions.ExpressionType.MemberAccess">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.Linq.Expressions.ExpressionType.MemberInit">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.Linq.Expressions.ExpressionType.Modulo">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.Linq.Expressions.ExpressionType.ModuloAssign">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.Linq.Expressions.ExpressionType.Multiply">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.Linq.Expressions.ExpressionType.MultiplyAssign">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.Linq.Expressions.ExpressionType.MultiplyChecked">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.Linq.Expressions.ExpressionType.Negate">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.Linq.Expressions.ExpressionType.NegateChecked">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.Linq.Expressions.ExpressionType.New">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.Linq.Expressions.ExpressionType.NewArrayBounds">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.Linq.Expressions.ExpressionType.NewArrayInit">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.Linq.Expressions.ExpressionType.Not">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.Linq.Expressions.ExpressionType.NotEqual">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.Linq.Expressions.ExpressionType.OnesComplement">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.Linq.Expressions.ExpressionType.Or">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.Linq.Expressions.ExpressionType.OrAssign">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.Linq.Expressions.ExpressionType.OrElse">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.Linq.Expressions.ExpressionType.Parameter">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.Linq.Expressions.ExpressionType.PostDecrementAssign">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.Linq.Expressions.ExpressionType.PostIncrementAssign">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.Linq.Expressions.ExpressionType.Power">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.Linq.Expressions.ExpressionType.PowerAssign">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.Linq.Expressions.ExpressionType.PreDecrementAssign">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.Linq.Expressions.ExpressionType.PreIncrementAssign">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.Linq.Expressions.ExpressionType.Quote">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.Linq.Expressions.ExpressionType.RightShift">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.Linq.Expressions.ExpressionType.RightShiftAssign">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.Linq.Expressions.ExpressionType.RuntimeVariables">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.Linq.Expressions.ExpressionType.Subtract">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.Linq.Expressions.ExpressionType.SubtractAssign">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.Linq.Expressions.ExpressionType.SubtractChecked">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.Linq.Expressions.ExpressionType.Switch">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.Linq.Expressions.ExpressionType.Throw">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.Linq.Expressions.ExpressionType.Try">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.Linq.Expressions.ExpressionType.TypeAs">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.Linq.Expressions.ExpressionType.TypeEqual">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.Linq.Expressions.ExpressionType.TypeIs">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.Linq.Expressions.ExpressionType.UnaryPlus">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.Linq.Expressions.ExpressionType.Unbox">
            <summary>To be added.</summary>
        </member>
        <member name="T:System.Linq.Expressions.ExpressionVisitor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:System.Linq.Expressions.ExpressionVisitor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.ExpressionVisitor.Visit(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.Expression})">
            <param name="nodes">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.ExpressionVisitor.Visit(System.Linq.Expressions.Expression)">
            <param name="node">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.ExpressionVisitor.Visit``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.Func{``0,``0})">
            <typeparam name="T">To be added.</typeparam>
            <param name="nodes">To be added.</param>
            <param name="elementVisitor">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.String)">
            <typeparam name="T">To be added.</typeparam>
            <param name="nodes">To be added.</param>
            <param name="callerName">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(``0,System.String)">
            <typeparam name="T">To be added.</typeparam>
            <param name="node">To be added.</param>
            <param name="callerName">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression)">
            <param name="node">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitBlock(System.Linq.Expressions.BlockExpression)">
            <param name="node">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitCatchBlock(System.Linq.Expressions.CatchBlock)">
            <param name="node">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitConditional(System.Linq.Expressions.ConditionalExpression)">
            <param name="node">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitConstant(System.Linq.Expressions.ConstantExpression)">
            <param name="node">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitDebugInfo(System.Linq.Expressions.DebugInfoExpression)">
            <param name="node">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitDefault(System.Linq.Expressions.DefaultExpression)">
            <param name="node">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitDynamic(System.Linq.Expressions.DynamicExpression)">
            <param name="node">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitElementInit(System.Linq.Expressions.ElementInit)">
            <param name="node">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitExtension(System.Linq.Expressions.Expression)">
            <param name="node">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitGoto(System.Linq.Expressions.GotoExpression)">
            <param name="node">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitIndex(System.Linq.Expressions.IndexExpression)">
            <param name="node">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitInvocation(System.Linq.Expressions.InvocationExpression)">
            <param name="node">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitLabel(System.Linq.Expressions.LabelExpression)">
            <param name="node">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitLabelTarget(System.Linq.Expressions.LabelTarget)">
            <param name="node">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitLambda``1(System.Linq.Expressions.Expression{``0})">
            <typeparam name="T">To be added.</typeparam>
            <param name="node">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitListInit(System.Linq.Expressions.ListInitExpression)">
            <param name="node">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitLoop(System.Linq.Expressions.LoopExpression)">
            <param name="node">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMember(System.Linq.Expressions.MemberExpression)">
            <param name="node">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberAssignment(System.Linq.Expressions.MemberAssignment)">
            <param name="node">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberBinding(System.Linq.Expressions.MemberBinding)">
            <param name="node">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberInit(System.Linq.Expressions.MemberInitExpression)">
            <param name="node">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberListBinding(System.Linq.Expressions.MemberListBinding)">
            <param name="node">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)">
            <param name="node">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
            <param name="node">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitNew(System.Linq.Expressions.NewExpression)">
            <param name="node">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitNewArray(System.Linq.Expressions.NewArrayExpression)">
            <param name="node">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitParameter(System.Linq.Expressions.ParameterExpression)">
            <param name="node">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitRuntimeVariables(System.Linq.Expressions.RuntimeVariablesExpression)">
            <param name="node">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitSwitch(System.Linq.Expressions.SwitchExpression)">
            <param name="node">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitSwitchCase(System.Linq.Expressions.SwitchCase)">
            <param name="node">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitTry(System.Linq.Expressions.TryExpression)">
            <param name="node">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitTypeBinary(System.Linq.Expressions.TypeBinaryExpression)">
            <param name="node">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitUnary(System.Linq.Expressions.UnaryExpression)">
            <param name="node">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.Linq.Expressions.GotoExpression">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.GotoExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
            <param name="visitor">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.GotoExpression.Kind">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.GotoExpression.NodeType">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.GotoExpression.Target">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.GotoExpression.Type">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.GotoExpression.Update(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
            <param name="target">To be added.</param>
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.GotoExpression.Value">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.Linq.Expressions.GotoExpressionKind">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:System.Linq.Expressions.GotoExpressionKind.Break">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.Linq.Expressions.GotoExpressionKind.Continue">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.Linq.Expressions.GotoExpressionKind.Goto">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.Linq.Expressions.GotoExpressionKind.Return">
            <summary>To be added.</summary>
        </member>
        <member name="T:System.Linq.Expressions.IArgumentProvider">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.IArgumentProvider.ArgumentCount">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.IArgumentProvider.GetArgument(System.Int32)">
            <param name="index">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.Linq.Expressions.IDynamicExpression">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.IDynamicExpression.CreateCallSite">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.IDynamicExpression.DelegateType">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.IDynamicExpression.Rewrite(System.Linq.Expressions.Expression[])">
            <param name="args">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.Linq.Expressions.IndexExpression">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.IndexExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
            <param name="visitor">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.IndexExpression.Arguments">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.IndexExpression.Indexer">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.IndexExpression.NodeType">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.IndexExpression.Object">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.IndexExpression.System#Linq#Expressions#IArgumentProvider#ArgumentCount">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.IndexExpression.System#Linq#Expressions#IArgumentProvider#GetArgument(System.Int32)">
            <param name="index">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.IndexExpression.Type">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.IndexExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <param name="object">To be added.</param>
            <param name="arguments">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.Linq.Expressions.InvocationExpression">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.InvocationExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
            <param name="visitor">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.InvocationExpression.Arguments">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.InvocationExpression.Expression">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.InvocationExpression.NodeType">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.InvocationExpression.System#Linq#Expressions#IArgumentProvider#ArgumentCount">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.InvocationExpression.System#Linq#Expressions#IArgumentProvider#GetArgument(System.Int32)">
            <param name="index">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.InvocationExpression.Type">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.InvocationExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <param name="expression">To be added.</param>
            <param name="arguments">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.Linq.Expressions.LabelExpression">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.LabelExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
            <param name="visitor">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.LabelExpression.DefaultValue">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.LabelExpression.NodeType">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.LabelExpression.Target">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.LabelExpression.Type">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.LabelExpression.Update(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
            <param name="target">To be added.</param>
            <param name="defaultValue">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.Linq.Expressions.LabelTarget">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.LabelTarget.Name">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.LabelTarget.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.LabelTarget.Type">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.Linq.Expressions.LambdaExpression">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.LambdaExpression.Body">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.LambdaExpression.Compile">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.LambdaExpression.Compile(System.Boolean)">
            <param name="preferInterpretation">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.LambdaExpression.Compile(System.Runtime.CompilerServices.DebugInfoGenerator)">
            <param name="debugInfoGenerator">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.LambdaExpression.CompileToMethod(System.Reflection.Emit.MethodBuilder)">
            <param name="method">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.LambdaExpression.CompileToMethod(System.Reflection.Emit.MethodBuilder,System.Runtime.CompilerServices.DebugInfoGenerator)">
            <param name="method">To be added.</param>
            <param name="debugInfoGenerator">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.LambdaExpression.Name">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.LambdaExpression.NodeType">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.LambdaExpression.Parameters">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.LambdaExpression.ReturnType">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.LambdaExpression.TailCall">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.LambdaExpression.Type">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.Linq.Expressions.ListInitExpression">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.ListInitExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
            <param name="visitor">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.ListInitExpression.CanReduce">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.ListInitExpression.Initializers">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.ListInitExpression.NewExpression">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.ListInitExpression.NodeType">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.ListInitExpression.Reduce">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.ListInitExpression.Type">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.ListInitExpression.Update(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
            <param name="newExpression">To be added.</param>
            <param name="initializers">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.Linq.Expressions.LoopExpression">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.LoopExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
            <param name="visitor">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.LoopExpression.Body">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.LoopExpression.BreakLabel">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.LoopExpression.ContinueLabel">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.LoopExpression.NodeType">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.LoopExpression.Type">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.LoopExpression.Update(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
            <param name="breakLabel">To be added.</param>
            <param name="continueLabel">To be added.</param>
            <param name="body">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.Linq.Expressions.MemberAssignment">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.MemberAssignment.Expression">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.MemberAssignment.Update(System.Linq.Expressions.Expression)">
            <param name="expression">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.Linq.Expressions.MemberBinding">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:System.Linq.Expressions.MemberBinding(System.Linq.Expressions.MemberBindingType,System.Reflection.MemberInfo)">
            <param name="type">To be added.</param>
            <param name="member">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.MemberBinding.BindingType">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.MemberBinding.Member">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.MemberBinding.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.Linq.Expressions.MemberBindingType">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:System.Linq.Expressions.MemberBindingType.Assignment">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.Linq.Expressions.MemberBindingType.ListBinding">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.Linq.Expressions.MemberBindingType.MemberBinding">
            <summary>To be added.</summary>
        </member>
        <member name="T:System.Linq.Expressions.MemberExpression">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.MemberExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
            <param name="visitor">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.MemberExpression.Expression">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.MemberExpression.Member">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.MemberExpression.NodeType">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.MemberExpression.Update(System.Linq.Expressions.Expression)">
            <param name="expression">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.Linq.Expressions.MemberInitExpression">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.MemberInitExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
            <param name="visitor">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.MemberInitExpression.Bindings">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.MemberInitExpression.CanReduce">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.MemberInitExpression.NewExpression">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.MemberInitExpression.NodeType">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.MemberInitExpression.Reduce">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.MemberInitExpression.Type">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.MemberInitExpression.Update(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
            <param name="newExpression">To be added.</param>
            <param name="bindings">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.Linq.Expressions.MemberListBinding">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.MemberListBinding.Initializers">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.MemberListBinding.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
            <param name="initializers">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.Linq.Expressions.MemberMemberBinding">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.MemberMemberBinding.Bindings">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.MemberMemberBinding.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
            <param name="bindings">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.Linq.Expressions.MethodCallExpression">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.MethodCallExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
            <param name="visitor">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.MethodCallExpression.Arguments">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.MethodCallExpression.Method">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.MethodCallExpression.NodeType">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.MethodCallExpression.Object">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.MethodCallExpression.System#Linq#Expressions#IArgumentProvider#ArgumentCount">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.MethodCallExpression.System#Linq#Expressions#IArgumentProvider#GetArgument(System.Int32)">
            <param name="index">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.MethodCallExpression.Type">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.MethodCallExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <param name="object">To be added.</param>
            <param name="arguments">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.Linq.Expressions.NewArrayExpression">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.NewArrayExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
            <param name="visitor">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.NewArrayExpression.Expressions">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.NewArrayExpression.Type">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.NewArrayExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <param name="expressions">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.Linq.Expressions.NewExpression">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.NewExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
            <param name="visitor">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.NewExpression.Arguments">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.NewExpression.Constructor">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.NewExpression.Members">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.NewExpression.NodeType">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.NewExpression.System#Linq#Expressions#IArgumentProvider#ArgumentCount">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.NewExpression.System#Linq#Expressions#IArgumentProvider#GetArgument(System.Int32)">
            <param name="index">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.NewExpression.Type">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.NewExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <param name="arguments">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.Linq.Expressions.ParameterExpression">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.ParameterExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
            <param name="visitor">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.ParameterExpression.IsByRef">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.ParameterExpression.Name">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.ParameterExpression.NodeType">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.ParameterExpression.Type">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.Linq.Expressions.RuntimeVariablesExpression">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.RuntimeVariablesExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
            <param name="visitor">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.RuntimeVariablesExpression.NodeType">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.RuntimeVariablesExpression.Type">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.RuntimeVariablesExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
            <param name="variables">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.Linq.Expressions.SwitchCase">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.SwitchCase.Body">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.SwitchCase.TestValues">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.SwitchCase.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.SwitchCase.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Linq.Expressions.Expression)">
            <param name="testValues">To be added.</param>
            <param name="body">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.Linq.Expressions.SwitchExpression">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.SwitchExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
            <param name="visitor">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.SwitchExpression.Cases">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.SwitchExpression.Comparison">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.SwitchExpression.DefaultBody">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.SwitchExpression.NodeType">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.SwitchExpression.SwitchValue">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.SwitchExpression.Type">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.SwitchExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase},System.Linq.Expressions.Expression)">
            <param name="switchValue">To be added.</param>
            <param name="cases">To be added.</param>
            <param name="defaultBody">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.Linq.Expressions.SymbolDocumentInfo">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.SymbolDocumentInfo.DocumentType">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.SymbolDocumentInfo.FileName">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.SymbolDocumentInfo.Language">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.Linq.Expressions.TryExpression">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.TryExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
            <param name="visitor">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.TryExpression.Body">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.TryExpression.Fault">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.TryExpression.Finally">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.TryExpression.Handlers">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.TryExpression.NodeType">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.TryExpression.Type">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.TryExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock},System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <param name="body">To be added.</param>
            <param name="handlers">To be added.</param>
            <param name="finally">To be added.</param>
            <param name="fault">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.Linq.Expressions.TypeBinaryExpression">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.TypeBinaryExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
            <param name="visitor">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.TypeBinaryExpression.Expression">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.TypeBinaryExpression.NodeType">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.TypeBinaryExpression.Type">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.TypeBinaryExpression.Update(System.Linq.Expressions.Expression)">
            <param name="expression">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.Linq.Expressions.UnaryExpression">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.UnaryExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
            <param name="visitor">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.UnaryExpression.CanReduce">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.UnaryExpression.IsLifted">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.UnaryExpression.IsLiftedToNull">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.UnaryExpression.Method">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.UnaryExpression.NodeType">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.UnaryExpression.Operand">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.UnaryExpression.Reduce">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Linq.Expressions.UnaryExpression.Type">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Linq.Expressions.UnaryExpression.Update(System.Linq.Expressions.Expression)">
            <param name="operand">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.CallSite">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Runtime.CompilerServices.CallSite.Binder">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Runtime.CompilerServices.CallSite.Create(System.Type,System.Runtime.CompilerServices.CallSiteBinder)">
            <param name="delegateType">To be added.</param>
            <param name="binder">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.CallSite`1">
            <typeparam name="T">To be added.</typeparam>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Runtime.CompilerServices.CallSite`1.Create(System.Runtime.CompilerServices.CallSiteBinder)">
            <param name="binder">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:System.Runtime.CompilerServices.CallSite`1.Target">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Runtime.CompilerServices.CallSite`1.Update">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.CallSiteBinder">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:System.Runtime.CompilerServices.CallSiteBinder">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Runtime.CompilerServices.CallSiteBinder.Bind(System.Object[],System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.LabelTarget)">
            <param name="args">To be added.</param>
            <param name="parameters">To be added.</param>
            <param name="returnLabel">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Runtime.CompilerServices.CallSiteBinder.BindDelegate``1(System.Runtime.CompilerServices.CallSite{``0},System.Object[])">
            <typeparam name="T">To be added.</typeparam>
            <param name="site">To be added.</param>
            <param name="args">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Runtime.CompilerServices.CallSiteBinder.CacheTarget``1(``0)">
            <typeparam name="T">To be added.</typeparam>
            <param name="target">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Runtime.CompilerServices.CallSiteBinder.UpdateLabel">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.CallSiteHelpers">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Runtime.CompilerServices.CallSiteHelpers.IsInternalFrame(System.Reflection.MethodBase)">
            <param name="mb">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.CallSiteOps">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Runtime.CompilerServices.CallSiteOps.AddRule``1(System.Runtime.CompilerServices.CallSite{``0},``0)">
            <typeparam name="T">To be added.</typeparam>
            <param name="site">To be added.</param>
            <param name="rule">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Runtime.CompilerServices.CallSiteOps.Bind``1(System.Runtime.CompilerServices.CallSiteBinder,System.Runtime.CompilerServices.CallSite{``0},System.Object[])">
            <typeparam name="T">To be added.</typeparam>
            <param name="binder">To be added.</param>
            <param name="site">To be added.</param>
            <param name="args">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Runtime.CompilerServices.CallSiteOps.ClearMatch(System.Runtime.CompilerServices.CallSite)">
            <param name="site">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Runtime.CompilerServices.CallSiteOps.CreateMatchmaker``1(System.Runtime.CompilerServices.CallSite{``0})">
            <typeparam name="T">To be added.</typeparam>
            <param name="site">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Runtime.CompilerServices.CallSiteOps.GetCachedRules``1(System.Runtime.CompilerServices.RuleCache{``0})">
            <typeparam name="T">To be added.</typeparam>
            <param name="cache">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Runtime.CompilerServices.CallSiteOps.GetMatch(System.Runtime.CompilerServices.CallSite)">
            <param name="site">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Runtime.CompilerServices.CallSiteOps.GetRuleCache``1(System.Runtime.CompilerServices.CallSite{``0})">
            <typeparam name="T">To be added.</typeparam>
            <param name="site">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Runtime.CompilerServices.CallSiteOps.GetRules``1(System.Runtime.CompilerServices.CallSite{``0})">
            <typeparam name="T">To be added.</typeparam>
            <param name="site">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Runtime.CompilerServices.CallSiteOps.MoveRule``1(System.Runtime.CompilerServices.RuleCache{``0},``0,System.Int32)">
            <typeparam name="T">To be added.</typeparam>
            <param name="cache">To be added.</param>
            <param name="rule">To be added.</param>
            <param name="i">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Runtime.CompilerServices.CallSiteOps.SetNotMatched(System.Runtime.CompilerServices.CallSite)">
            <param name="site">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Runtime.CompilerServices.CallSiteOps.UpdateRules``1(System.Runtime.CompilerServices.CallSite{``0},System.Int32)">
            <typeparam name="T">To be added.</typeparam>
            <param name="this">To be added.</param>
            <param name="matched">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.Closure">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:System.Runtime.CompilerServices.Closure(System.Object[],System.Object[])">
            <param name="constants">To be added.</param>
            <param name="locals">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:System.Runtime.CompilerServices.Closure.Constants">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:System.Runtime.CompilerServices.Closure.Locals">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.DebugInfoGenerator">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:System.Runtime.CompilerServices.DebugInfoGenerator">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Runtime.CompilerServices.DebugInfoGenerator.CreatePdbGenerator">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Runtime.CompilerServices.DebugInfoGenerator.MarkSequencePoint(System.Linq.Expressions.LambdaExpression,System.Int32,System.Linq.Expressions.DebugInfoExpression)">
            <param name="method">To be added.</param>
            <param name="ilOffset">To be added.</param>
            <param name="sequencePoint">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.DynamicAttribute">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:System.Runtime.CompilerServices.DynamicAttribute">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:System.Runtime.CompilerServices.DynamicAttribute(System.Boolean[])">
            <param name="transformFlags">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Runtime.CompilerServices.DynamicAttribute.TransformFlags">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.ExecutionScope">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Runtime.CompilerServices.ExecutionScope.CreateDelegate(System.Int32,System.Object[])">
            <param name="indexLambda">To be added.</param>
            <param name="locals">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Runtime.CompilerServices.ExecutionScope.CreateHoistedLocals">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:System.Runtime.CompilerServices.ExecutionScope.Globals">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Runtime.CompilerServices.ExecutionScope.IsolateExpression(System.Linq.Expressions.Expression,System.Object[])">
            <param name="expression">To be added.</param>
            <param name="locals">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:System.Runtime.CompilerServices.ExecutionScope.Locals">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:System.Runtime.CompilerServices.ExecutionScope.Parent">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.IRuntimeVariables">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Runtime.CompilerServices.IRuntimeVariables.Count">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Runtime.CompilerServices.IRuntimeVariables.Item(System.Int32)">
            <param name="index">To be added.</param>
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.IStrongBox">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Runtime.CompilerServices.IStrongBox.Value">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1">
            <typeparam name="T">To be added.</typeparam>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1(`0System`0.`0Collections`0.`0Generic`0.`0IEnumerable`0{`0T`0})">
            <param name="collection">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1(`0System`0.`0Int32`0)">
            <param name="capacity">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Add(`0T`0)">
            <param name="item">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Capacity">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Clear">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Contains(`0T`0)">
            <param name="item">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.CopyTo(`0T`0[],`0System`0.`0Int32`0)">
            <param name="array">To be added.</param>
            <param name="arrayIndex">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Count">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.GetEnumerator">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.IndexOf(`0T`0)">
            <param name="item">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Insert(`0System`0.`0Int32`0,`0T`0)">
            <param name="index">To be added.</param>
            <param name="item">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Item(`0System`0.`0Int32`0)">
            <param name="index">To be added.</param>
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Remove(`0T`0)">
            <param name="item">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.RemoveAt(`0System`0.`0Int32`0)">
            <param name="index">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Reverse">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Reverse(`0System`0.`0Int32`0,`0System`0.`0Int32`0)">
            <param name="index">To be added.</param>
            <param name="count">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#ICollection#CopyTo(`0System`0.`0Array`0,`0System`0.`0Int32`0)">
            <param name="array">To be added.</param>
            <param name="index">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#ICollection#IsSynchronized">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#ICollection#SyncRoot">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#Add(`0System`0.`0Object`0)">
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#Contains(`0System`0.`0Object`0)">
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#IndexOf(`0System`0.`0Object`0)">
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#Insert(`0System`0.`0Int32`0,`0System`0.`0Object`0)">
            <param name="index">To be added.</param>
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#IsFixedSize">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#IsReadOnly">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#Item(`0System`0.`0Int32`0)">
            <param name="index">To be added.</param>
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#Remove(`0System`0.`0Object`0)">
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.ToArray">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.ToReadOnlyCollection">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.RuleCache`1">
            <typeparam name="T">To be added.</typeparam>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.RuntimeOps">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Runtime.CompilerServices.RuntimeOps.CreateRuntimeVariables">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Runtime.CompilerServices.RuntimeOps.CreateRuntimeVariables(System.Object[],System.Int64[])">
            <param name="data">To be added.</param>
            <param name="indexes">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Runtime.CompilerServices.RuntimeOps.ExpandoCheckVersion(System.Dynamic.ExpandoObject,System.Object)">
            <param name="expando">To be added.</param>
            <param name="version">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Runtime.CompilerServices.RuntimeOps.ExpandoPromoteClass(System.Dynamic.ExpandoObject,System.Object,System.Object)">
            <param name="expando">To be added.</param>
            <param name="oldClass">To be added.</param>
            <param name="newClass">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Runtime.CompilerServices.RuntimeOps.ExpandoTryDeleteValue(System.Dynamic.ExpandoObject,System.Object,System.Int32,System.String,System.Boolean)">
            <param name="expando">To be added.</param>
            <param name="indexClass">To be added.</param>
            <param name="index">To be added.</param>
            <param name="name">To be added.</param>
            <param name="ignoreCase">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Runtime.CompilerServices.RuntimeOps.ExpandoTryGetValue(System.Dynamic.ExpandoObject,System.Object,System.Int32,System.String,System.Boolean,System.Object@)">
            <param name="expando">To be added.</param>
            <param name="indexClass">To be added.</param>
            <param name="index">To be added.</param>
            <param name="name">To be added.</param>
            <param name="ignoreCase">To be added.</param>
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Runtime.CompilerServices.RuntimeOps.ExpandoTrySetValue(System.Dynamic.ExpandoObject,System.Object,System.Int32,System.Object,System.String,System.Boolean)">
            <param name="expando">To be added.</param>
            <param name="indexClass">To be added.</param>
            <param name="index">To be added.</param>
            <param name="value">To be added.</param>
            <param name="name">To be added.</param>
            <param name="ignoreCase">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Runtime.CompilerServices.RuntimeOps.MergeRuntimeVariables(System.Runtime.CompilerServices.IRuntimeVariables,System.Runtime.CompilerServices.IRuntimeVariables,System.Int32[])">
            <param name="first">To be added.</param>
            <param name="second">To be added.</param>
            <param name="indexes">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Runtime.CompilerServices.RuntimeOps.Quote(System.Linq.Expressions.Expression,System.Object,System.Object[])">
            <param name="expression">To be added.</param>
            <param name="hoistedLocals">To be added.</param>
            <param name="locals">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.StrongBox`1">
            <typeparam name="T">To be added.</typeparam>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:System.Runtime.CompilerServices.StrongBox`1">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:System.Runtime.CompilerServices.StrongBox`1(`0T`0)">
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Runtime.CompilerServices.StrongBox`1.System#Runtime#CompilerServices#IStrongBox#Value">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:System.Runtime.CompilerServices.StrongBox`1.Value">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.Runtime.InteropServices.ComAwareEventInfo">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:System.Runtime.InteropServices.ComAwareEventInfo(System.Type,System.String)">
            <param name="type">To be added.</param>
            <param name="eventName">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.AddEventHandler(System.Object,System.Delegate)">
            <param name="target">To be added.</param>
            <param name="handler">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Runtime.InteropServices.ComAwareEventInfo.Attributes">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Runtime.InteropServices.ComAwareEventInfo.DeclaringType">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetAddMethod(System.Boolean)">
            <param name="nonPublic">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetCustomAttributes(System.Boolean)">
            <param name="inherit">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetCustomAttributes(System.Type,System.Boolean)">
            <param name="attributeType">To be added.</param>
            <param name="inherit">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetRaiseMethod(System.Boolean)">
            <param name="nonPublic">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetRemoveMethod(System.Boolean)">
            <param name="nonPublic">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.IsDefined(System.Type,System.Boolean)">
            <param name="attributeType">To be added.</param>
            <param name="inherit">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Runtime.InteropServices.ComAwareEventInfo.Name">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Runtime.InteropServices.ComAwareEventInfo.ReflectedType">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.RemoveEventHandler(System.Object,System.Delegate)">
            <param name="target">To be added.</param>
            <param name="handler">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.Security.Cryptography.AesCng">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:System.Security.Cryptography.AesCng">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:System.Security.Cryptography.AesCng(System.String)">
            <param name="keyName">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:System.Security.Cryptography.AesCng(System.String,System.Security.Cryptography.CngProvider)">
            <param name="keyName">To be added.</param>
            <param name="provider">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:System.Security.Cryptography.AesCng(System.String,System.Security.Cryptography.CngProvider,System.Security.Cryptography.CngKeyOpenOptions)">
            <param name="keyName">To be added.</param>
            <param name="provider">To be added.</param>
            <param name="openOptions">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Security.Cryptography.AesCng.CreateDecryptor">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Security.Cryptography.AesCng.CreateDecryptor(System.Byte[],System.Byte[])">
            <param name="rgbKey">To be added.</param>
            <param name="rgbIV">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Security.Cryptography.AesCng.CreateEncryptor">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Security.Cryptography.AesCng.CreateEncryptor(System.Byte[],System.Byte[])">
            <param name="rgbKey">To be added.</param>
            <param name="rgbIV">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Security.Cryptography.AesCng.Dispose(System.Boolean)">
            <param name="disposing">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Security.Cryptography.AesCng.GenerateIV">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Security.Cryptography.AesCng.GenerateKey">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Security.Cryptography.AesCng.Key">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Security.Cryptography.AesCng.KeySize">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.Security.Cryptography.AesCryptoServiceProvider">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:System.Security.Cryptography.AesCryptoServiceProvider">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Security.Cryptography.AesCryptoServiceProvider.CreateDecryptor">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Security.Cryptography.AesCryptoServiceProvider.CreateDecryptor(System.Byte[],System.Byte[])">
            <param name="rgbKey">To be added.</param>
            <param name="rgbIV">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Security.Cryptography.AesCryptoServiceProvider.CreateEncryptor">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Security.Cryptography.AesCryptoServiceProvider.CreateEncryptor(System.Byte[],System.Byte[])">
            <param name="rgbKey">To be added.</param>
            <param name="rgbIV">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Security.Cryptography.AesCryptoServiceProvider.Dispose(System.Boolean)">
            <param name="disposing">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Security.Cryptography.AesCryptoServiceProvider.FeedbackSize">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Security.Cryptography.AesCryptoServiceProvider.GenerateIV">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Security.Cryptography.AesCryptoServiceProvider.GenerateKey">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Security.Cryptography.AesCryptoServiceProvider.IV">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Security.Cryptography.AesCryptoServiceProvider.Key">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Security.Cryptography.AesCryptoServiceProvider.KeySize">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Security.Cryptography.AesCryptoServiceProvider.Mode">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Security.Cryptography.AesCryptoServiceProvider.Padding">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.Security.Cryptography.AesManaged">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:System.Security.Cryptography.AesManaged">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Security.Cryptography.AesManaged.CreateDecryptor">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Security.Cryptography.AesManaged.CreateDecryptor(System.Byte[],System.Byte[])">
            <param name="key">To be added.</param>
            <param name="iv">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Security.Cryptography.AesManaged.CreateEncryptor">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Security.Cryptography.AesManaged.CreateEncryptor(System.Byte[],System.Byte[])">
            <param name="key">To be added.</param>
            <param name="iv">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Security.Cryptography.AesManaged.Dispose(System.Boolean)">
            <param name="disposing">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Security.Cryptography.AesManaged.FeedbackSize">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Security.Cryptography.AesManaged.GenerateIV">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Security.Cryptography.AesManaged.GenerateKey">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Security.Cryptography.AesManaged.IV">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Security.Cryptography.AesManaged.Key">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Security.Cryptography.AesManaged.KeySize">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Security.Cryptography.AesManaged.Mode">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Security.Cryptography.AesManaged.Padding">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.Security.Cryptography.CngAlgorithm">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:System.Security.Cryptography.CngAlgorithm(System.String)">
            <param name="algorithm">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Security.Cryptography.CngAlgorithm.Algorithm">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Security.Cryptography.CngAlgorithm.ECDiffieHellman">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Security.Cryptography.CngAlgorithm.ECDiffieHellmanP256">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Security.Cryptography.CngAlgorithm.ECDiffieHellmanP384">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Security.Cryptography.CngAlgorithm.ECDiffieHellmanP521">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Security.Cryptography.CngAlgorithm.ECDsa">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Security.Cryptography.CngAlgorithm.ECDsaP256">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Security.Cryptography.CngAlgorithm.ECDsaP384">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Security.Cryptography.CngAlgorithm.ECDsaP521">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Security.Cryptography.CngAlgorithm.Equals(System.Object)">
            <param name="obj">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Security.Cryptography.CngAlgorithm.Equals(System.Security.Cryptography.CngAlgorithm)">
            <param name="other">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Security.Cryptography.CngAlgorithm.GetHashCode">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Security.Cryptography.CngAlgorithm.MD5">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Security.Cryptography.CngAlgorithm.op_Equality(System.Security.Cryptography.CngAlgorithm,System.Security.Cryptography.CngAlgorithm)">
            <param name="left">To be added.</param>
            <param name="right">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Security.Cryptography.CngAlgorithm.op_Inequality(System.Security.Cryptography.CngAlgorithm,System.Security.Cryptography.CngAlgorithm)">
            <param name="left">To be added.</param>
            <param name="right">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Security.Cryptography.CngAlgorithm.Rsa">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Security.Cryptography.CngAlgorithm.Sha1">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Security.Cryptography.CngAlgorithm.Sha256">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Security.Cryptography.CngAlgorithm.Sha384">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Security.Cryptography.CngAlgorithm.Sha512">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Security.Cryptography.CngAlgorithm.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.Security.Cryptography.CngAlgorithmGroup">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:System.Security.Cryptography.CngAlgorithmGroup(System.String)">
            <param name="algorithmGroup">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Security.Cryptography.CngAlgorithmGroup.AlgorithmGroup">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Security.Cryptography.CngAlgorithmGroup.DiffieHellman">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Security.Cryptography.CngAlgorithmGroup.Dsa">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Security.Cryptography.CngAlgorithmGroup.ECDiffieHellman">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Security.Cryptography.CngAlgorithmGroup.ECDsa">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Security.Cryptography.CngAlgorithmGroup.Equals(System.Object)">
            <param name="obj">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Security.Cryptography.CngAlgorithmGroup.Equals(System.Security.Cryptography.CngAlgorithmGroup)">
            <param name="other">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Security.Cryptography.CngAlgorithmGroup.GetHashCode">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Security.Cryptography.CngAlgorithmGroup.op_Equality(System.Security.Cryptography.CngAlgorithmGroup,System.Security.Cryptography.CngAlgorithmGroup)">
            <param name="left">To be added.</param>
            <param name="right">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Security.Cryptography.CngAlgorithmGroup.op_Inequality(System.Security.Cryptography.CngAlgorithmGroup,System.Security.Cryptography.CngAlgorithmGroup)">
            <param name="left">To be added.</param>
            <param name="right">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Security.Cryptography.CngAlgorithmGroup.Rsa">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Security.Cryptography.CngAlgorithmGroup.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.Security.Cryptography.CngExportPolicies">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:System.Security.Cryptography.CngExportPolicies.AllowArchiving">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.Security.Cryptography.CngExportPolicies.AllowExport">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.Security.Cryptography.CngExportPolicies.AllowPlaintextArchiving">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.Security.Cryptography.CngExportPolicies.AllowPlaintextExport">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.Security.Cryptography.CngExportPolicies.None">
            <summary>To be added.</summary>
        </member>
        <member name="T:System.Security.Cryptography.CngKey">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:System.Security.Cryptography.CngKey">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Security.Cryptography.CngKey.Algorithm">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Security.Cryptography.CngKey.AlgorithmGroup">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Security.Cryptography.CngKey.Create(System.Security.Cryptography.CngAlgorithm)">
            <param name="algorithm">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Security.Cryptography.CngKey.Create(System.Security.Cryptography.CngAlgorithm,System.String)">
            <param name="algorithm">To be added.</param>
            <param name="keyName">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Security.Cryptography.CngKey.Create(System.Security.Cryptography.CngAlgorithm,System.String,System.Security.Cryptography.CngKeyCreationParameters)">
            <param name="algorithm">To be added.</param>
            <param name="keyName">To be added.</param>
            <param name="creationParameters">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Security.Cryptography.CngKey.Delete">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Security.Cryptography.CngKey.Dispose">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Security.Cryptography.CngKey.Exists(System.String)">
            <param name="keyName">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Security.Cryptography.CngKey.Exists(System.String,System.Security.Cryptography.CngProvider)">
            <param name="keyName">To be added.</param>
            <param name="provider">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Security.Cryptography.CngKey.Exists(System.String,System.Security.Cryptography.CngProvider,System.Security.Cryptography.CngKeyOpenOptions)">
            <param name="keyName">To be added.</param>
            <param name="provider">To be added.</param>
            <param name="options">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Security.Cryptography.CngKey.Export(System.Security.Cryptography.CngKeyBlobFormat)">
            <param name="format">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Security.Cryptography.CngKey.ExportPolicy">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Security.Cryptography.CngKey.GetProperty(System.String,System.Security.Cryptography.CngPropertyOptions)">
            <param name="name">To be added.</param>
            <param name="options">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Security.Cryptography.CngKey.Handle">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Security.Cryptography.CngKey.HasProperty(System.String,System.Security.Cryptography.CngPropertyOptions)">
            <param name="name">To be added.</param>
            <param name="options">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Security.Cryptography.CngKey.Import(System.Byte[],System.Security.Cryptography.CngKeyBlobFormat)">
            <param name="keyBlob">To be added.</param>
            <param name="format">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Security.Cryptography.CngKey.Import(System.Byte[],System.Security.Cryptography.CngKeyBlobFormat,System.Security.Cryptography.CngProvider)">
            <param name="keyBlob">To be added.</param>
            <param name="format">To be added.</param>
            <param name="provider">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Security.Cryptography.CngKey.IsEphemeral">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Security.Cryptography.CngKey.IsMachineKey">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Security.Cryptography.CngKey.KeyName">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Security.Cryptography.CngKey.KeySize">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Security.Cryptography.CngKey.KeyUsage">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Security.Cryptography.CngKey.Open(System.String)">
            <param name="keyName">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Security.Cryptography.CngKey.Open(Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle,System.Security.Cryptography.CngKeyHandleOpenOptions)">
            <param name="keyHandle">To be added.</param>
            <param name="keyHandleOpenOptions">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Security.Cryptography.CngKey.Open(System.String,System.Security.Cryptography.CngProvider)">
            <param name="keyName">To be added.</param>
            <param name="provider">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Security.Cryptography.CngKey.Open(System.String,System.Security.Cryptography.CngProvider,System.Security.Cryptography.CngKeyOpenOptions)">
            <param name="keyName">To be added.</param>
            <param name="provider">To be added.</param>
            <param name="openOptions">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Security.Cryptography.CngKey.ParentWindowHandle">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Security.Cryptography.CngKey.Provider">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Security.Cryptography.CngKey.ProviderHandle">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Security.Cryptography.CngKey.SetProperty(System.Security.Cryptography.CngProperty)">
            <param name="property">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Security.Cryptography.CngKey.UIPolicy">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Security.Cryptography.CngKey.UniqueName">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.Security.Cryptography.CngKeyBlobFormat">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:System.Security.Cryptography.CngKeyBlobFormat(System.String)">
            <param name="format">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Security.Cryptography.CngKeyBlobFormat.EccFullPrivateBlob">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Security.Cryptography.CngKeyBlobFormat.EccFullPublicBlob">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Security.Cryptography.CngKeyBlobFormat.EccPrivateBlob">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Security.Cryptography.CngKeyBlobFormat.EccPublicBlob">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Security.Cryptography.CngKeyBlobFormat.Equals(System.Object)">
            <param name="obj">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Security.Cryptography.CngKeyBlobFormat.Equals(System.Security.Cryptography.CngKeyBlobFormat)">
            <param name="other">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Security.Cryptography.CngKeyBlobFormat.Format">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Security.Cryptography.CngKeyBlobFormat.GenericPrivateBlob">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Security.Cryptography.CngKeyBlobFormat.GenericPublicBlob">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Security.Cryptography.CngKeyBlobFormat.GetHashCode">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Security.Cryptography.CngKeyBlobFormat.op_Equality(System.Security.Cryptography.CngKeyBlobFormat,System.Security.Cryptography.CngKeyBlobFormat)">
            <param name="left">To be added.</param>
            <param name="right">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Security.Cryptography.CngKeyBlobFormat.op_Inequality(System.Security.Cryptography.CngKeyBlobFormat,System.Security.Cryptography.CngKeyBlobFormat)">
            <param name="left">To be added.</param>
            <param name="right">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Security.Cryptography.CngKeyBlobFormat.OpaqueTransportBlob">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Security.Cryptography.CngKeyBlobFormat.Pkcs8PrivateBlob">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Security.Cryptography.CngKeyBlobFormat.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.Security.Cryptography.CngKeyCreationOptions">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:System.Security.Cryptography.CngKeyCreationOptions.MachineKey">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.Security.Cryptography.CngKeyCreationOptions.None">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.Security.Cryptography.CngKeyCreationOptions.OverwriteExistingKey">
            <summary>To be added.</summary>
        </member>
        <member name="T:System.Security.Cryptography.CngKeyCreationParameters">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:System.Security.Cryptography.CngKeyCreationParameters">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Security.Cryptography.CngKeyCreationParameters.ExportPolicy">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Security.Cryptography.CngKeyCreationParameters.KeyCreationOptions">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Security.Cryptography.CngKeyCreationParameters.KeyUsage">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Security.Cryptography.CngKeyCreationParameters.Parameters">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Security.Cryptography.CngKeyCreationParameters.ParentWindowHandle">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Security.Cryptography.CngKeyCreationParameters.Provider">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Security.Cryptography.CngKeyCreationParameters.UIPolicy">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.Security.Cryptography.CngKeyHandleOpenOptions">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:System.Security.Cryptography.CngKeyHandleOpenOptions.EphemeralKey">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.Security.Cryptography.CngKeyHandleOpenOptions.None">
            <summary>To be added.</summary>
        </member>
        <member name="T:System.Security.Cryptography.CngKeyOpenOptions">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:System.Security.Cryptography.CngKeyOpenOptions.MachineKey">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.Security.Cryptography.CngKeyOpenOptions.None">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.Security.Cryptography.CngKeyOpenOptions.Silent">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.Security.Cryptography.CngKeyOpenOptions.UserKey">
            <summary>To be added.</summary>
        </member>
        <member name="T:System.Security.Cryptography.CngKeyUsages">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:System.Security.Cryptography.CngKeyUsages.AllUsages">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.Security.Cryptography.CngKeyUsages.Decryption">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.Security.Cryptography.CngKeyUsages.KeyAgreement">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.Security.Cryptography.CngKeyUsages.None">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.Security.Cryptography.CngKeyUsages.Signing">
            <summary>To be added.</summary>
        </member>
        <member name="T:System.Security.Cryptography.CngProperty">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:System.Security.Cryptography.CngProperty(System.String,System.Byte[],System.Security.Cryptography.CngPropertyOptions)">
            <param name="name">To be added.</param>
            <param name="value">To be added.</param>
            <param name="options">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Security.Cryptography.CngProperty.Equals(System.Object)">
            <param name="obj">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Security.Cryptography.CngProperty.Equals(System.Security.Cryptography.CngProperty)">
            <param name="other">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Security.Cryptography.CngProperty.GetHashCode">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Security.Cryptography.CngProperty.GetValue">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Security.Cryptography.CngProperty.Name">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Security.Cryptography.CngProperty.op_Equality(System.Security.Cryptography.CngProperty,System.Security.Cryptography.CngProperty)">
            <param name="left">To be added.</param>
            <param name="right">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Security.Cryptography.CngProperty.op_Inequality(System.Security.Cryptography.CngProperty,System.Security.Cryptography.CngProperty)">
            <param name="left">To be added.</param>
            <param name="right">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Security.Cryptography.CngProperty.Options">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.Security.Cryptography.CngPropertyCollection">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:System.Security.Cryptography.CngPropertyCollection">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.Security.Cryptography.CngPropertyOptions">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:System.Security.Cryptography.CngPropertyOptions.CustomProperty">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.Security.Cryptography.CngPropertyOptions.None">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.Security.Cryptography.CngPropertyOptions.Persist">
            <summary>To be added.</summary>
        </member>
        <member name="T:System.Security.Cryptography.CngProvider">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:System.Security.Cryptography.CngProvider(System.String)">
            <param name="provider">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Security.Cryptography.CngProvider.Equals(System.Object)">
            <param name="obj">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Security.Cryptography.CngProvider.Equals(System.Security.Cryptography.CngProvider)">
            <param name="other">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Security.Cryptography.CngProvider.GetHashCode">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Security.Cryptography.CngProvider.MicrosoftSmartCardKeyStorageProvider">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Security.Cryptography.CngProvider.MicrosoftSoftwareKeyStorageProvider">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Security.Cryptography.CngProvider.op_Equality(System.Security.Cryptography.CngProvider,System.Security.Cryptography.CngProvider)">
            <param name="left">To be added.</param>
            <param name="right">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Security.Cryptography.CngProvider.op_Inequality(System.Security.Cryptography.CngProvider,System.Security.Cryptography.CngProvider)">
            <param name="left">To be added.</param>
            <param name="right">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Security.Cryptography.CngProvider.Provider">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Security.Cryptography.CngProvider.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.Security.Cryptography.CngUIPolicy">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:System.Security.Cryptography.CngUIPolicy(System.Security.Cryptography.CngUIProtectionLevels)">
            <param name="protectionLevel">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:System.Security.Cryptography.CngUIPolicy(System.Security.Cryptography.CngUIProtectionLevels,System.String)">
            <param name="protectionLevel">To be added.</param>
            <param name="friendlyName">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:System.Security.Cryptography.CngUIPolicy(System.Security.Cryptography.CngUIProtectionLevels,System.String,System.String)">
            <param name="protectionLevel">To be added.</param>
            <param name="friendlyName">To be added.</param>
            <param name="description">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:System.Security.Cryptography.CngUIPolicy(System.Security.Cryptography.CngUIProtectionLevels,System.String,System.String,System.String)">
            <param name="protectionLevel">To be added.</param>
            <param name="friendlyName">To be added.</param>
            <param name="description">To be added.</param>
            <param name="useContext">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:System.Security.Cryptography.CngUIPolicy(System.Security.Cryptography.CngUIProtectionLevels,System.String,System.String,System.String,System.String)">
            <param name="protectionLevel">To be added.</param>
            <param name="friendlyName">To be added.</param>
            <param name="description">To be added.</param>
            <param name="useContext">To be added.</param>
            <param name="creationTitle">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Security.Cryptography.CngUIPolicy.CreationTitle">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Security.Cryptography.CngUIPolicy.Description">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Security.Cryptography.CngUIPolicy.FriendlyName">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Security.Cryptography.CngUIPolicy.ProtectionLevel">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Security.Cryptography.CngUIPolicy.UseContext">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.Security.Cryptography.CngUIProtectionLevels">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:System.Security.Cryptography.CngUIProtectionLevels.ForceHighProtection">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.Security.Cryptography.CngUIProtectionLevels.None">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.Security.Cryptography.CngUIProtectionLevels.ProtectKey">
            <summary>To be added.</summary>
        </member>
        <member name="T:System.Security.Cryptography.ECCurve">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:System.Security.Cryptography.ECCurve.A">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:System.Security.Cryptography.ECCurve.B">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:System.Security.Cryptography.ECCurve.Cofactor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Security.Cryptography.ECCurve.CreateFromFriendlyName(System.String)">
            <param name="oidFriendlyName">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Security.Cryptography.ECCurve.CreateFromOid(System.Security.Cryptography.Oid)">
            <param name="curveOid">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Security.Cryptography.ECCurve.CreateFromValue(System.String)">
            <param name="oidValue">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:System.Security.Cryptography.ECCurve.CurveType">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:System.Security.Cryptography.ECCurve.G">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:System.Security.Cryptography.ECCurve.Hash">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Security.Cryptography.ECCurve.IsCharacteristic2">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Security.Cryptography.ECCurve.IsExplicit">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Security.Cryptography.ECCurve.IsNamed">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Security.Cryptography.ECCurve.IsPrime">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Security.Cryptography.ECCurve.Oid">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:System.Security.Cryptography.ECCurve.Order">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:System.Security.Cryptography.ECCurve.Polynomial">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:System.Security.Cryptography.ECCurve.Prime">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:System.Security.Cryptography.ECCurve.Seed">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Security.Cryptography.ECCurve.Validate">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.Security.Cryptography.ECCurve+ECCurveType">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:System.Security.Cryptography.ECCurve+ECCurveType.Characteristic2">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.Security.Cryptography.ECCurve+ECCurveType.Implicit">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.Security.Cryptography.ECCurve+ECCurveType.Named">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.Security.Cryptography.ECCurve+ECCurveType.PrimeMontgomery">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.Security.Cryptography.ECCurve+ECCurveType.PrimeShortWeierstrass">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.Security.Cryptography.ECCurve+ECCurveType.PrimeTwistedEdwards">
            <summary>To be added.</summary>
        </member>
        <member name="T:System.Security.Cryptography.ECCurve+NamedCurves">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Security.Cryptography.ECCurve+NamedCurves.brainpoolP160r1">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Security.Cryptography.ECCurve+NamedCurves.brainpoolP160t1">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Security.Cryptography.ECCurve+NamedCurves.brainpoolP192r1">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Security.Cryptography.ECCurve+NamedCurves.brainpoolP192t1">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Security.Cryptography.ECCurve+NamedCurves.brainpoolP224r1">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Security.Cryptography.ECCurve+NamedCurves.brainpoolP224t1">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Security.Cryptography.ECCurve+NamedCurves.brainpoolP256r1">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Security.Cryptography.ECCurve+NamedCurves.brainpoolP256t1">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Security.Cryptography.ECCurve+NamedCurves.brainpoolP320r1">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Security.Cryptography.ECCurve+NamedCurves.brainpoolP320t1">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Security.Cryptography.ECCurve+NamedCurves.brainpoolP384r1">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Security.Cryptography.ECCurve+NamedCurves.brainpoolP384t1">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Security.Cryptography.ECCurve+NamedCurves.brainpoolP512r1">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Security.Cryptography.ECCurve+NamedCurves.brainpoolP512t1">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Security.Cryptography.ECCurve+NamedCurves.nistP256">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Security.Cryptography.ECCurve+NamedCurves.nistP384">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Security.Cryptography.ECCurve+NamedCurves.nistP521">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.Security.Cryptography.ECDiffieHellmanPublicKey">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:System.Security.Cryptography.ECDiffieHellmanPublicKey(System.Byte[])">
            <param name="keyBlob">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Security.Cryptography.ECDiffieHellmanPublicKey.Dispose">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Security.Cryptography.ECDiffieHellmanPublicKey.Dispose(System.Boolean)">
            <param name="disposing">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Security.Cryptography.ECDiffieHellmanPublicKey.ToByteArray">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Security.Cryptography.ECDiffieHellmanPublicKey.ToXmlString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.Security.Cryptography.ECDsa">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:System.Security.Cryptography.ECDsa">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Security.Cryptography.ECDsa.Create">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Security.Cryptography.ECDsa.Create(System.Security.Cryptography.ECCurve)">
            <param name="curve">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Security.Cryptography.ECDsa.Create(System.Security.Cryptography.ECParameters)">
            <param name="parameters">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Security.Cryptography.ECDsa.Create(System.String)">
            <param name="algorithm">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Security.Cryptography.ECDsa.ExportExplicitParameters(System.Boolean)">
            <param name="includePrivateParameters">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Security.Cryptography.ECDsa.ExportParameters(System.Boolean)">
            <param name="includePrivateParameters">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Security.Cryptography.ECDsa.GenerateKey(System.Security.Cryptography.ECCurve)">
            <param name="curve">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Security.Cryptography.ECDsa.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)">
            <param name="data">To be added.</param>
            <param name="hashAlgorithm">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Security.Cryptography.ECDsa.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)">
            <param name="data">To be added.</param>
            <param name="offset">To be added.</param>
            <param name="count">To be added.</param>
            <param name="hashAlgorithm">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Security.Cryptography.ECDsa.ImportParameters(System.Security.Cryptography.ECParameters)">
            <param name="parameters">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Security.Cryptography.ECDsa.KeyExchangeAlgorithm">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Security.Cryptography.ECDsa.SignatureAlgorithm">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName)">
            <param name="data">To be added.</param>
            <param name="hashAlgorithm">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Security.Cryptography.ECDsa.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)">
            <param name="data">To be added.</param>
            <param name="hashAlgorithm">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)">
            <param name="data">To be added.</param>
            <param name="offset">To be added.</param>
            <param name="count">To be added.</param>
            <param name="hashAlgorithm">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Security.Cryptography.ECDsa.SignHash(System.Byte[])">
            <param name="hash">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName)">
            <param name="data">To be added.</param>
            <param name="signature">To be added.</param>
            <param name="hashAlgorithm">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Security.Cryptography.ECDsa.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName)">
            <param name="data">To be added.</param>
            <param name="signature">To be added.</param>
            <param name="hashAlgorithm">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName)">
            <param name="data">To be added.</param>
            <param name="offset">To be added.</param>
            <param name="count">To be added.</param>
            <param name="signature">To be added.</param>
            <param name="hashAlgorithm">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Security.Cryptography.ECDsa.VerifyHash(System.Byte[],System.Byte[])">
            <param name="hash">To be added.</param>
            <param name="signature">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.Security.Cryptography.ECDsaCng">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:System.Security.Cryptography.ECDsaCng">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:System.Security.Cryptography.ECDsaCng(System.Int32)">
            <param name="keySize">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:System.Security.Cryptography.ECDsaCng(System.Security.Cryptography.CngKey)">
            <param name="key">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:System.Security.Cryptography.ECDsaCng(System.Security.Cryptography.ECCurve)">
            <param name="curve">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Security.Cryptography.ECDsaCng.Key">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Security.Cryptography.ECDsaCng.SignHash(System.Byte[])">
            <param name="hash">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Security.Cryptography.ECDsaCng.VerifyHash(System.Byte[],System.Byte[])">
            <param name="hash">To be added.</param>
            <param name="signature">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.Security.Cryptography.ECParameters">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:System.Security.Cryptography.ECParameters.Curve">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:System.Security.Cryptography.ECParameters.D">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:System.Security.Cryptography.ECParameters.Q">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Security.Cryptography.ECParameters.Validate">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.Security.Cryptography.ECPoint">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:System.Security.Cryptography.ECPoint.X">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:System.Security.Cryptography.ECPoint.Y">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.Security.Cryptography.RSACng">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:System.Security.Cryptography.RSACng">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:System.Security.Cryptography.RSACng(System.Int32)">
            <param name="keySize">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:System.Security.Cryptography.RSACng(System.Security.Cryptography.CngKey)">
            <param name="key">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Security.Cryptography.RSACng.ExportParameters(System.Boolean)">
            <param name="includePrivateParameters">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Security.Cryptography.RSACng.ImportParameters(System.Security.Cryptography.RSAParameters)">
            <param name="parameters">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Security.Cryptography.RSACng.Key">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.Security.Cryptography.TripleDESCng">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:System.Security.Cryptography.TripleDESCng">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:System.Security.Cryptography.TripleDESCng(System.String)">
            <param name="keyName">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:System.Security.Cryptography.TripleDESCng(System.String,System.Security.Cryptography.CngProvider)">
            <param name="keyName">To be added.</param>
            <param name="provider">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:System.Security.Cryptography.TripleDESCng(System.String,System.Security.Cryptography.CngProvider,System.Security.Cryptography.CngKeyOpenOptions)">
            <param name="keyName">To be added.</param>
            <param name="provider">To be added.</param>
            <param name="openOptions">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Security.Cryptography.TripleDESCng.CreateDecryptor">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Security.Cryptography.TripleDESCng.CreateDecryptor(System.Byte[],System.Byte[])">
            <param name="rgbKey">To be added.</param>
            <param name="rgbIV">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Security.Cryptography.TripleDESCng.CreateEncryptor">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Security.Cryptography.TripleDESCng.CreateEncryptor(System.Byte[],System.Byte[])">
            <param name="rgbKey">To be added.</param>
            <param name="rgbIV">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Security.Cryptography.TripleDESCng.Dispose(System.Boolean)">
            <param name="disposing">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Security.Cryptography.TripleDESCng.GenerateIV">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Security.Cryptography.TripleDESCng.GenerateKey">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Security.Cryptography.TripleDESCng.Key">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Security.Cryptography.TripleDESCng.KeySize">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions.GetECDsaPrivateKey(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <param name="certificate">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions.GetECDsaPublicKey(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <param name="certificate">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.Security.Cryptography.X509Certificates.RSACertificateExtensions">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Security.Cryptography.X509Certificates.RSACertificateExtensions.GetRSAPrivateKey(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <param name="certificate">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Security.Cryptography.X509Certificates.RSACertificateExtensions.GetRSAPublicKey(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <param name="certificate">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.Threading.LockRecursionPolicy">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:System.Threading.LockRecursionPolicy.NoRecursion">
            <summary>To be added.</summary>
        </member>
        <member name="F:System.Threading.LockRecursionPolicy.SupportsRecursion">
            <summary>To be added.</summary>
        </member>
        <member name="T:System.Threading.ReaderWriterLockSlim">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:System.Threading.ReaderWriterLockSlim">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:System.Threading.ReaderWriterLockSlim(System.Threading.LockRecursionPolicy)">
            <param name="recursionPolicy">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Threading.ReaderWriterLockSlim.CurrentReadCount">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Threading.ReaderWriterLockSlim.Dispose">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Threading.ReaderWriterLockSlim.EnterReadLock">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Threading.ReaderWriterLockSlim.EnterUpgradeableReadLock">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Threading.ReaderWriterLockSlim.EnterWriteLock">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Threading.ReaderWriterLockSlim.ExitReadLock">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Threading.ReaderWriterLockSlim.ExitUpgradeableReadLock">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Threading.ReaderWriterLockSlim.ExitWriteLock">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Threading.ReaderWriterLockSlim.IsReadLockHeld">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Threading.ReaderWriterLockSlim.IsUpgradeableReadLockHeld">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Threading.ReaderWriterLockSlim.IsWriteLockHeld">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Threading.ReaderWriterLockSlim.RecursiveReadCount">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Threading.ReaderWriterLockSlim.RecursiveUpgradeCount">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Threading.ReaderWriterLockSlim.RecursiveWriteCount">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Threading.ReaderWriterLockSlim.TryEnterReadLock(System.Int32)">
            <param name="millisecondsTimeout">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Threading.ReaderWriterLockSlim.TryEnterReadLock(System.TimeSpan)">
            <param name="timeout">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Threading.ReaderWriterLockSlim.TryEnterUpgradeableReadLock(System.Int32)">
            <param name="millisecondsTimeout">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Threading.ReaderWriterLockSlim.TryEnterUpgradeableReadLock(System.TimeSpan)">
            <param name="timeout">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Threading.ReaderWriterLockSlim.TryEnterWriteLock(System.Int32)">
            <param name="millisecondsTimeout">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Threading.ReaderWriterLockSlim.TryEnterWriteLock(System.TimeSpan)">
            <param name="timeout">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Threading.ReaderWriterLockSlim.WaitingReadCount">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Threading.ReaderWriterLockSlim.WaitingUpgradeCount">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:System.Threading.ReaderWriterLockSlim.WaitingWriteCount">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:System.Threading.Tasks.TaskExtensions">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Threading.Tasks.TaskExtensions.Unwrap(System.Threading.Tasks.Task{System.Threading.Tasks.Task})">
            <param name="task">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:System.Threading.Tasks.TaskExtensions.Unwrap``1(System.Threading.Tasks.Task{System.Threading.Tasks.Task{``0}})">
            <typeparam name="TResult">To be added.</typeparam>
            <param name="task">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
    </members>
</doc>
